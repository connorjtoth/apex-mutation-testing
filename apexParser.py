# Generated from apex.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3{")
        buf.write("\u055f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\3\2\5\2\u00dc\n\2\3")
        buf.write("\2\7\2\u00df\n\2\f\2\16\2\u00e2\13\2\3\2\7\2\u00e5\n\2")
        buf.write("\f\2\16\2\u00e8\13\2\3\2\3\2\3\3\7\3\u00ed\n\3\f\3\16")
        buf.write("\3\u00f0\13\3\3\3\3\3\3\3\3\3\3\4\3\4\5\4\u00f8\n\4\3")
        buf.write("\4\3\4\3\4\5\4\u00fd\n\4\3\4\3\4\3\5\7\5\u0102\n\5\f\5")
        buf.write("\16\5\u0105\13\5\3\5\3\5\7\5\u0109\n\5\f\5\16\5\u010c")
        buf.write("\13\5\3\5\3\5\7\5\u0110\n\5\f\5\16\5\u0113\13\5\3\5\3")
        buf.write("\5\7\5\u0117\n\5\f\5\16\5\u011a\13\5\3\5\3\5\5\5\u011e")
        buf.write("\n\5\3\6\3\6\5\6\u0122\n\6\3\7\3\7\5\7\u0126\n\7\3\b\3")
        buf.write("\b\5\b\u012a\n\b\3\t\3\t\3\t\5\t\u012f\n\t\3\t\3\t\5\t")
        buf.write("\u0133\n\t\3\t\3\t\5\t\u0137\n\t\3\t\3\t\3\n\3\n\3\n\3")
        buf.write("\n\7\n\u013f\n\n\f\n\16\n\u0142\13\n\3\n\3\n\3\13\3\13")
        buf.write("\3\13\5\13\u0149\n\13\3\f\3\f\3\f\7\f\u014e\n\f\f\f\16")
        buf.write("\f\u0151\13\f\3\r\3\r\3\r\3\r\5\r\u0157\n\r\3\r\3\r\5")
        buf.write("\r\u015b\n\r\3\r\5\r\u015e\n\r\3\r\5\r\u0161\n\r\3\r\3")
        buf.write("\r\3\16\3\16\3\16\7\16\u0168\n\16\f\16\16\16\u016b\13")
        buf.write("\16\3\17\7\17\u016e\n\17\f\17\16\17\u0171\13\17\3\17\3")
        buf.write("\17\5\17\u0175\n\17\3\17\5\17\u0178\n\17\3\20\3\20\7\20")
        buf.write("\u017c\n\20\f\20\16\20\u017f\13\20\3\21\3\21\3\21\5\21")
        buf.write("\u0184\n\21\3\21\3\21\5\21\u0188\n\21\3\21\3\21\3\22\3")
        buf.write("\22\3\22\7\22\u018f\n\22\f\22\16\22\u0192\13\22\3\23\3")
        buf.write("\23\7\23\u0196\n\23\f\23\16\23\u0199\13\23\3\23\3\23\3")
        buf.write("\24\3\24\7\24\u019f\n\24\f\24\16\24\u01a2\13\24\3\24\3")
        buf.write("\24\3\25\3\25\5\25\u01a8\n\25\3\25\3\25\7\25\u01ac\n\25")
        buf.write("\f\25\16\25\u01af\13\25\3\25\5\25\u01b2\n\25\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u01be\n")
        buf.write("\26\3\27\5\27\u01c1\n\27\3\27\3\27\5\27\u01c5\n\27\3\27")
        buf.write("\3\27\3\27\3\27\7\27\u01cb\n\27\f\27\16\27\u01ce\13\27")
        buf.write("\3\27\3\27\5\27\u01d2\n\27\3\27\3\27\5\27\u01d6\n\27\3")
        buf.write("\30\3\30\3\30\3\31\3\31\3\31\3\31\5\31\u01df\n\31\3\31")
        buf.write("\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34")
        buf.write("\3\34\3\35\3\35\3\35\5\35\u01f1\n\35\3\35\3\35\3\36\7")
        buf.write("\36\u01f6\n\36\f\36\16\36\u01f9\13\36\3\36\3\36\5\36\u01fd")
        buf.write("\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0206\n")
        buf.write("\37\3 \3 \3 \3 \7 \u020c\n \f \16 \u020f\13 \3 \3 \3!")
        buf.write("\3!\3!\7!\u0216\n!\f!\16!\u0219\13!\3!\3!\3!\3\"\3\"\5")
        buf.write("\"\u0220\n\"\3\"\3\"\3\"\3\"\7\"\u0226\n\"\f\"\16\"\u0229")
        buf.write("\13\"\3\"\3\"\5\"\u022d\n\"\3\"\3\"\3#\3#\3#\3$\3$\3$")
        buf.write("\7$\u0237\n$\f$\16$\u023a\13$\3%\3%\3%\5%\u023f\n%\3&")
        buf.write("\3&\3&\7&\u0244\n&\f&\16&\u0247\13&\3\'\3\'\5\'\u024b")
        buf.write("\n\'\3(\3(\3(\3(\7(\u0251\n(\f(\16(\u0254\13(\3(\5(\u0257")
        buf.write("\n(\5(\u0259\n(\3(\3(\3)\3)\3*\3*\3*\7*\u0262\n*\f*\16")
        buf.write("*\u0265\13*\3*\3*\3*\7*\u026a\n*\f*\16*\u026d\13*\5*\u026f")
        buf.write("\n*\3+\3+\5+\u0273\n+\3+\3+\3+\5+\u0278\n+\7+\u027a\n")
        buf.write("+\f+\16+\u027d\13+\3+\3+\5+\u0281\n+\3,\3,\3-\3-\3-\3")
        buf.write("-\7-\u0289\n-\f-\16-\u028c\13-\3-\3-\3.\3.\3.\3.\5.\u0294")
        buf.write("\n.\5.\u0296\n.\3/\3/\3/\7/\u029b\n/\f/\16/\u029e\13/")
        buf.write("\3\60\3\60\5\60\u02a2\n\60\3\60\3\60\3\61\3\61\3\61\7")
        buf.write("\61\u02a9\n\61\f\61\16\61\u02ac\13\61\3\61\3\61\5\61\u02b0")
        buf.write("\n\61\3\61\5\61\u02b3\n\61\3\62\7\62\u02b6\n\62\f\62\16")
        buf.write("\62\u02b9\13\62\3\62\3\62\3\62\3\63\7\63\u02bf\n\63\f")
        buf.write("\63\16\63\u02c2\13\63\3\63\3\63\3\63\3\63\3\64\3\64\3")
        buf.write("\65\3\65\3\66\3\66\3\66\7\66\u02cf\n\66\f\66\16\66\u02d2")
        buf.write("\13\66\3\67\3\67\38\38\38\38\38\58\u02db\n8\38\58\u02de")
        buf.write("\n8\39\39\3:\3:\3:\7:\u02e5\n:\f:\16:\u02e8\13:\3;\3;")
        buf.write("\3;\3;\3<\3<\3<\5<\u02f1\n<\3=\3=\3=\3=\7=\u02f7\n=\f")
        buf.write("=\16=\u02fa\13=\5=\u02fc\n=\3=\5=\u02ff\n=\3=\3=\3>\3")
        buf.write(">\3>\3>\3>\3?\3?\7?\u030a\n?\f?\16?\u030d\13?\3?\3?\3")
        buf.write("@\7@\u0312\n@\f@\16@\u0315\13@\3@\3@\5@\u0319\n@\3A\3")
        buf.write("A\3A\3A\3A\3A\5A\u0321\nA\3A\3A\5A\u0325\nA\3A\3A\5A\u0329")
        buf.write("\nA\3A\3A\5A\u032d\nA\5A\u032f\nA\3B\3B\5B\u0333\nB\3")
        buf.write("C\3C\3C\3C\5C\u0339\nC\3D\3D\3E\3E\3E\3F\3F\7F\u0342\n")
        buf.write("F\fF\16F\u0345\13F\3F\3F\3G\3G\3G\5G\u034c\nG\3H\3H\3")
        buf.write("H\3I\7I\u0352\nI\fI\16I\u0355\13I\3I\3I\3I\3J\3J\3J\3")
        buf.write("J\3J\3J\5J\u0360\nJ\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\6J\u037b\nJ\r")
        buf.write("J\16J\u037c\3J\5J\u0380\nJ\3J\5J\u0383\nJ\3J\3J\3J\3J")
        buf.write("\7J\u0389\nJ\fJ\16J\u038c\13J\3J\5J\u038f\nJ\3J\3J\5J")
        buf.write("\u0393\nJ\3J\3J\3J\3J\3J\3J\3J\5J\u039c\nJ\3J\3J\3J\5")
        buf.write("J\u03a1\nJ\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u03ae\n")
        buf.write("J\3K\7K\u03b1\nK\fK\16K\u03b4\13K\3K\3K\5K\u03b8\nK\3")
        buf.write("L\3L\3L\5L\u03bd\nL\3M\3M\3M\5M\u03c2\nM\3N\3N\3N\7N\u03c7")
        buf.write("\nN\fN\16N\u03ca\13N\3N\3N\3N\3N\3N\3O\3O\3O\7O\u03d4")
        buf.write("\nO\fO\16O\u03d7\13O\3P\3P\3P\3Q\3Q\3Q\5Q\u03df\nQ\3Q")
        buf.write("\3Q\3R\3R\3R\7R\u03e6\nR\fR\16R\u03e9\13R\3S\7S\u03ec")
        buf.write("\nS\fS\16S\u03ef\13S\3S\3S\3S\3S\3S\3T\3T\5T\u03f8\nT")
        buf.write("\3T\3T\5T\u03fc\nT\3T\3T\5T\u0400\nT\5T\u0402\nT\3U\3")
        buf.write("U\5U\u0406\nU\3V\7V\u0409\nV\fV\16V\u040c\13V\3V\3V\3")
        buf.write("V\3V\3V\3W\3W\3X\3X\3X\3X\3Y\3Y\3Y\7Y\u041c\nY\fY\16Y")
        buf.write("\u041f\13Y\3Z\3Z\3[\3[\3\\\3\\\3\\\7\\\u0428\n\\\f\\\16")
        buf.write("\\\u042b\13\\\3]\3]\3]\5]\u0430\n]\3^\3^\3^\3^\3^\3^\3")
        buf.write("^\3^\3^\3^\3^\3^\3^\5^\u043f\n^\3^\3^\3^\3^\3^\3^\3^\3")
        buf.write("^\3^\3^\3^\3^\3^\3^\5^\u044f\n^\3^\3^\3^\3^\3^\3^\3^\3")
        buf.write("^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3")
        buf.write("^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\5^\u0475\n^\3^\3^\3^\3")
        buf.write("^\3^\3^\5^\u047d\n^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3")
        buf.write("^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\5^\u049b")
        buf.write("\n^\3^\3^\3^\3^\3^\3^\7^\u04a3\n^\f^\16^\u04a6\13^\3_")
        buf.write("\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\5_\u04bb\n_\3_\5_\u04be\n_\3`\3`\3`\3`\3`\3`\3`\3`\3")
        buf.write("`\5`\u04c9\n`\5`\u04cb\n`\3a\3a\5a\u04cf\na\3a\3a\3a\5")
        buf.write("a\u04d4\na\7a\u04d6\na\fa\16a\u04d9\13a\3a\3a\3a\5a\u04de")
        buf.write("\na\3b\3b\5b\u04e2\nb\3b\3b\3c\3c\3c\3c\7c\u04ea\nc\f")
        buf.write("c\16c\u04ed\13c\3c\3c\3c\3c\3c\3c\3c\7c\u04f6\nc\fc\16")
        buf.write("c\u04f9\13c\3c\3c\7c\u04fd\nc\fc\16c\u0500\13c\5c\u0502")
        buf.write("\nc\3d\3d\3d\3d\5d\u0508\nd\3d\3d\3d\5d\u050d\nd\3d\3")
        buf.write("d\3d\5d\u0512\nd\3d\3d\3d\5d\u0517\nd\7d\u0519\nd\fd\16")
        buf.write("d\u051c\13d\3d\3d\5d\u0520\nd\3e\3e\3e\3e\5e\u0526\ne")
        buf.write("\3e\3e\3e\5e\u052b\ne\7e\u052d\ne\fe\16e\u0530\13e\3e")
        buf.write("\3e\5e\u0534\ne\3f\3f\5f\u0538\nf\3g\3g\3g\3h\3h\3h\3")
        buf.write("h\3i\3i\3i\5i\u0544\ni\3j\3j\3j\5j\u0549\nj\3k\3k\3k\3")
        buf.write("k\5k\u054f\nk\5k\u0551\nk\3l\3l\3l\3l\5l\u0557\nl\3m\3")
        buf.write("m\5m\u055b\nm\3m\3m\3m\2\3\u00ban\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be")
        buf.write("\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0")
        buf.write("\u00d2\u00d4\u00d6\u00d8\2\21\5\2!!++//\t\2\5\6\t\t\26")
        buf.write("\26$&))\64\67>>\7\2\13\13\r\r\30\30\37\37((\4\2\25\25")
        buf.write("**\3\2@E\4\299;=\3\2\\_\3\2RS\4\2`aee\3\2^_\4\2PQWX\5")
        buf.write("\2\3\3VVYY\4\2OOfp\3\29=\3\2\\]\2\u05de\2\u00db\3\2\2")
        buf.write("\2\4\u00ee\3\2\2\2\6\u00f5\3\2\2\2\b\u011d\3\2\2\2\n\u0121")
        buf.write("\3\2\2\2\f\u0125\3\2\2\2\16\u0129\3\2\2\2\20\u012b\3\2")
        buf.write("\2\2\22\u013a\3\2\2\2\24\u0145\3\2\2\2\26\u014a\3\2\2")
        buf.write("\2\30\u0152\3\2\2\2\32\u0164\3\2\2\2\34\u016f\3\2\2\2")
        buf.write("\36\u0179\3\2\2\2 \u0180\3\2\2\2\"\u018b\3\2\2\2$\u0193")
        buf.write("\3\2\2\2&\u019c\3\2\2\2(\u01b1\3\2\2\2*\u01bd\3\2\2\2")
        buf.write(",\u01c0\3\2\2\2.\u01d7\3\2\2\2\60\u01da\3\2\2\2\62\u01e2")
        buf.write("\3\2\2\2\64\u01e5\3\2\2\2\66\u01e9\3\2\2\28\u01ed\3\2")
        buf.write("\2\2:\u01fc\3\2\2\2<\u0205\3\2\2\2>\u0207\3\2\2\2@\u0212")
        buf.write("\3\2\2\2B\u021f\3\2\2\2D\u0230\3\2\2\2F\u0233\3\2\2\2")
        buf.write("H\u023b\3\2\2\2J\u0240\3\2\2\2L\u024a\3\2\2\2N\u024c\3")
        buf.write("\2\2\2P\u025c\3\2\2\2R\u026e\3\2\2\2T\u0280\3\2\2\2V\u0282")
        buf.write("\3\2\2\2X\u0284\3\2\2\2Z\u0295\3\2\2\2\\\u0297\3\2\2\2")
        buf.write("^\u029f\3\2\2\2`\u02b2\3\2\2\2b\u02b7\3\2\2\2d\u02c0\3")
        buf.write("\2\2\2f\u02c7\3\2\2\2h\u02c9\3\2\2\2j\u02cb\3\2\2\2l\u02d3")
        buf.write("\3\2\2\2n\u02d5\3\2\2\2p\u02df\3\2\2\2r\u02e1\3\2\2\2")
        buf.write("t\u02e9\3\2\2\2v\u02f0\3\2\2\2x\u02f2\3\2\2\2z\u0302\3")
        buf.write("\2\2\2|\u0307\3\2\2\2~\u0318\3\2\2\2\u0080\u032e\3\2\2")
        buf.write("\2\u0082\u0332\3\2\2\2\u0084\u0334\3\2\2\2\u0086\u033a")
        buf.write("\3\2\2\2\u0088\u033c\3\2\2\2\u008a\u033f\3\2\2\2\u008c")
        buf.write("\u034b\3\2\2\2\u008e\u034d\3\2\2\2\u0090\u0353\3\2\2\2")
        buf.write("\u0092\u03ad\3\2\2\2\u0094\u03b2\3\2\2\2\u0096\u03b9\3")
        buf.write("\2\2\2\u0098\u03be\3\2\2\2\u009a\u03c3\3\2\2\2\u009c\u03d0")
        buf.write("\3\2\2\2\u009e\u03d8\3\2\2\2\u00a0\u03db\3\2\2\2\u00a2")
        buf.write("\u03e2\3\2\2\2\u00a4\u03ed\3\2\2\2\u00a6\u0401\3\2\2\2")
        buf.write("\u00a8\u0405\3\2\2\2\u00aa\u040a\3\2\2\2\u00ac\u0412\3")
        buf.write("\2\2\2\u00ae\u0414\3\2\2\2\u00b0\u0418\3\2\2\2\u00b2\u0420")
        buf.write("\3\2\2\2\u00b4\u0422\3\2\2\2\u00b6\u0424\3\2\2\2\u00b8")
        buf.write("\u042f\3\2\2\2\u00ba\u043e\3\2\2\2\u00bc\u04bd\3\2\2\2")
        buf.write("\u00be\u04ca\3\2\2\2\u00c0\u04dd\3\2\2\2\u00c2\u04df\3")
        buf.write("\2\2\2\u00c4\u04e5\3\2\2\2\u00c6\u0503\3\2\2\2\u00c8\u0521")
        buf.write("\3\2\2\2\u00ca\u0535\3\2\2\2\u00cc\u0539\3\2\2\2\u00ce")
        buf.write("\u053c\3\2\2\2\u00d0\u0543\3\2\2\2\u00d2\u0548\3\2\2\2")
        buf.write("\u00d4\u0550\3\2\2\2\u00d6\u0556\3\2\2\2\u00d8\u0558\3")
        buf.write("\2\2\2\u00da\u00dc\5\4\3\2\u00db\u00da\3\2\2\2\u00db\u00dc")
        buf.write("\3\2\2\2\u00dc\u00e0\3\2\2\2\u00dd\u00df\5\6\4\2\u00de")
        buf.write("\u00dd\3\2\2\2\u00df\u00e2\3\2\2\2\u00e0\u00de\3\2\2\2")
        buf.write("\u00e0\u00e1\3\2\2\2\u00e1\u00e6\3\2\2\2\u00e2\u00e0\3")
        buf.write("\2\2\2\u00e3\u00e5\5\b\5\2\u00e4\u00e3\3\2\2\2\u00e5\u00e8")
        buf.write("\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7")
        buf.write("\u00e9\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e9\u00ea\7\2\2\3")
        buf.write("\u00ea\3\3\2\2\2\u00eb\u00ed\5n8\2\u00ec\u00eb\3\2\2\2")
        buf.write("\u00ed\u00f0\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee\u00ef\3")
        buf.write("\2\2\2\u00ef\u00f1\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f1\u00f2")
        buf.write("\7#\2\2\u00f2\u00f3\5j\66\2\u00f3\u00f4\7L\2\2\u00f4\5")
        buf.write("\3\2\2\2\u00f5\u00f7\7\35\2\2\u00f6\u00f8\7)\2\2\u00f7")
        buf.write("\u00f6\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f9\3\2\2\2")
        buf.write("\u00f9\u00fc\5j\66\2\u00fa\u00fb\7N\2\2\u00fb\u00fd\7")
        buf.write("`\2\2\u00fc\u00fa\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fe")
        buf.write("\3\2\2\2\u00fe\u00ff\7L\2\2\u00ff\7\3\2\2\2\u0100\u0102")
        buf.write("\5\f\7\2\u0101\u0100\3\2\2\2\u0102\u0105\3\2\2\2\u0103")
        buf.write("\u0101\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0106\3\2\2\2")
        buf.write("\u0105\u0103\3\2\2\2\u0106\u011e\5\20\t\2\u0107\u0109")
        buf.write("\5\f\7\2\u0108\u0107\3\2\2\2\u0109\u010c\3\2\2\2\u010a")
        buf.write("\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u010d\3\2\2\2")
        buf.write("\u010c\u010a\3\2\2\2\u010d\u011e\5\30\r\2\u010e\u0110")
        buf.write("\5\f\7\2\u010f\u010e\3\2\2\2\u0110\u0113\3\2\2\2\u0111")
        buf.write("\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0114\3\2\2\2")
        buf.write("\u0113\u0111\3\2\2\2\u0114\u011e\5 \21\2\u0115\u0117\5")
        buf.write("\f\7\2\u0116\u0115\3\2\2\2\u0117\u011a\3\2\2\2\u0118\u0116")
        buf.write("\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011b\3\2\2\2\u011a")
        buf.write("\u0118\3\2\2\2\u011b\u011e\5z>\2\u011c\u011e\7L\2\2\u011d")
        buf.write("\u0103\3\2\2\2\u011d\u010a\3\2\2\2\u011d\u0111\3\2\2\2")
        buf.write("\u011d\u0118\3\2\2\2\u011d\u011c\3\2\2\2\u011e\t\3\2\2")
        buf.write("\2\u011f\u0122\5\f\7\2\u0120\u0122\t\2\2\2\u0121\u011f")
        buf.write("\3\2\2\2\u0121\u0120\3\2\2\2\u0122\13\3\2\2\2\u0123\u0126")
        buf.write("\5n8\2\u0124\u0126\t\3\2\2\u0125\u0123\3\2\2\2\u0125\u0124")
        buf.write("\3\2\2\2\u0126\r\3\2\2\2\u0127\u012a\7\26\2\2\u0128\u012a")
        buf.write("\5n8\2\u0129\u0127\3\2\2\2\u0129\u0128\3\2\2\2\u012a\17")
        buf.write("\3\2\2\2\u012b\u012c\7\16\2\2\u012c\u012e\7r\2\2\u012d")
        buf.write("\u012f\5\22\n\2\u012e\u012d\3\2\2\2\u012e\u012f\3\2\2")
        buf.write("\2\u012f\u0132\3\2\2\2\u0130\u0131\7\25\2\2\u0131\u0133")
        buf.write("\5R*\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0136")
        buf.write("\3\2\2\2\u0134\u0135\7\34\2\2\u0135\u0137\5\"\22\2\u0136")
        buf.write("\u0134\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u0138\3\2\2\2")
        buf.write("\u0138\u0139\5$\23\2\u0139\21\3\2\2\2\u013a\u013b\7Q\2")
        buf.write("\2\u013b\u0140\5\24\13\2\u013c\u013d\7M\2\2\u013d\u013f")
        buf.write("\5\24\13\2\u013e\u013c\3\2\2\2\u013f\u0142\3\2\2\2\u0140")
        buf.write("\u013e\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0143\3\2\2\2")
        buf.write("\u0142\u0140\3\2\2\2\u0143\u0144\7P\2\2\u0144\23\3\2\2")
        buf.write("\2\u0145\u0148\7r\2\2\u0146\u0147\7\25\2\2\u0147\u0149")
        buf.write("\5\26\f\2\u0148\u0146\3\2\2\2\u0148\u0149\3\2\2\2\u0149")
        buf.write("\25\3\2\2\2\u014a\u014f\5R*\2\u014b\u014c\7b\2\2\u014c")
        buf.write("\u014e\5R*\2\u014d\u014b\3\2\2\2\u014e\u0151\3\2\2\2\u014f")
        buf.write("\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150\27\3\2\2\2\u0151")
        buf.write("\u014f\3\2\2\2\u0152\u0153\7\24\2\2\u0153\u0156\7r\2\2")
        buf.write("\u0154\u0155\7\34\2\2\u0155\u0157\5\"\22\2\u0156\u0154")
        buf.write("\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write("\u015a\7H\2\2\u0159\u015b\5\32\16\2\u015a\u0159\3\2\2")
        buf.write("\2\u015a\u015b\3\2\2\2\u015b\u015d\3\2\2\2\u015c\u015e")
        buf.write("\7M\2\2\u015d\u015c\3\2\2\2\u015d\u015e\3\2\2\2\u015e")
        buf.write("\u0160\3\2\2\2\u015f\u0161\5\36\20\2\u0160\u015f\3\2\2")
        buf.write("\2\u0160\u0161\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0163")
        buf.write("\7I\2\2\u0163\31\3\2\2\2\u0164\u0169\5\34\17\2\u0165\u0166")
        buf.write("\7M\2\2\u0166\u0168\5\34\17\2\u0167\u0165\3\2\2\2\u0168")
        buf.write("\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3\2\2\2")
        buf.write("\u016a\33\3\2\2\2\u016b\u0169\3\2\2\2\u016c\u016e\5n8")
        buf.write("\2\u016d\u016c\3\2\2\2\u016e\u0171\3\2\2\2\u016f\u016d")
        buf.write("\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0172\3\2\2\2\u0171")
        buf.write("\u016f\3\2\2\2\u0172\u0174\7r\2\2\u0173\u0175\5\u00d8")
        buf.write("m\2\u0174\u0173\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0177")
        buf.write("\3\2\2\2\u0176\u0178\5$\23\2\u0177\u0176\3\2\2\2\u0177")
        buf.write("\u0178\3\2\2\2\u0178\35\3\2\2\2\u0179\u017d\7L\2\2\u017a")
        buf.write("\u017c\5(\25\2\u017b\u017a\3\2\2\2\u017c\u017f\3\2\2\2")
        buf.write("\u017d\u017b\3\2\2\2\u017d\u017e\3\2\2\2\u017e\37\3\2")
        buf.write("\2\2\u017f\u017d\3\2\2\2\u0180\u0181\7 \2\2\u0181\u0183")
        buf.write("\7r\2\2\u0182\u0184\5\22\n\2\u0183\u0182\3\2\2\2\u0183")
        buf.write("\u0184\3\2\2\2\u0184\u0187\3\2\2\2\u0185\u0186\7\25\2")
        buf.write("\2\u0186\u0188\5\"\22\2\u0187\u0185\3\2\2\2\u0187\u0188")
        buf.write("\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018a\5&\24\2\u018a")
        buf.write("!\3\2\2\2\u018b\u0190\5R*\2\u018c\u018d\7M\2\2\u018d\u018f")
        buf.write("\5R*\2\u018e\u018c\3\2\2\2\u018f\u0192\3\2\2\2\u0190\u018e")
        buf.write("\3\2\2\2\u0190\u0191\3\2\2\2\u0191#\3\2\2\2\u0192\u0190")
        buf.write("\3\2\2\2\u0193\u0197\7H\2\2\u0194\u0196\5(\25\2\u0195")
        buf.write("\u0194\3\2\2\2\u0196\u0199\3\2\2\2\u0197\u0195\3\2\2\2")
        buf.write("\u0197\u0198\3\2\2\2\u0198\u019a\3\2\2\2\u0199\u0197\3")
        buf.write("\2\2\2\u019a\u019b\7I\2\2\u019b%\3\2\2\2\u019c\u01a0\7")
        buf.write("H\2\2\u019d\u019f\5:\36\2\u019e\u019d\3\2\2\2\u019f\u01a2")
        buf.write("\3\2\2\2\u01a0\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1")
        buf.write("\u01a3\3\2\2\2\u01a2\u01a0\3\2\2\2\u01a3\u01a4\7I\2\2")
        buf.write("\u01a4\'\3\2\2\2\u01a5\u01b2\7L\2\2\u01a6\u01a8\7)\2\2")
        buf.write("\u01a7\u01a6\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01a9\3")
        buf.write("\2\2\2\u01a9\u01b2\5\u008aF\2\u01aa\u01ac\5\n\6\2\u01ab")
        buf.write("\u01aa\3\2\2\2\u01ac\u01af\3\2\2\2\u01ad\u01ab\3\2\2\2")
        buf.write("\u01ad\u01ae\3\2\2\2\u01ae\u01b0\3\2\2\2\u01af\u01ad\3")
        buf.write("\2\2\2\u01b0\u01b2\5*\26\2\u01b1\u01a5\3\2\2\2\u01b1\u01a7")
        buf.write("\3\2\2\2\u01b1\u01ad\3\2\2\2\u01b2)\3\2\2\2\u01b3\u01be")
        buf.write("\5,\27\2\u01b4\u01be\5.\30\2\u01b5\u01be\5\64\33\2\u01b6")
        buf.write("\u01be\5\60\31\2\u01b7\u01be\5\62\32\2\u01b8\u01be\5 ")
        buf.write("\21\2\u01b9\u01be\5z>\2\u01ba\u01be\5\20\t\2\u01bb\u01be")
        buf.write("\5\30\r\2\u01bc\u01be\5\66\34\2\u01bd\u01b3\3\2\2\2\u01bd")
        buf.write("\u01b4\3\2\2\2\u01bd\u01b5\3\2\2\2\u01bd\u01b6\3\2\2\2")
        buf.write("\u01bd\u01b7\3\2\2\2\u01bd\u01b8\3\2\2\2\u01bd\u01b9\3")
        buf.write("\2\2\2\u01bd\u01ba\3\2\2\2\u01bd\u01bb\3\2\2\2\u01bd\u01bc")
        buf.write("\3\2\2\2\u01be+\3\2\2\2\u01bf\u01c1\7\5\2\2\u01c0\u01bf")
        buf.write("\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c4\3\2\2\2\u01c2")
        buf.write("\u01c5\5R*\2\u01c3\u01c5\7\61\2\2\u01c4\u01c2\3\2\2\2")
        buf.write("\u01c4\u01c3\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\u01c7\7")
        buf.write("r\2\2\u01c7\u01cc\5^\60\2\u01c8\u01c9\7J\2\2\u01c9\u01cb")
        buf.write("\7K\2\2\u01ca\u01c8\3\2\2\2\u01cb\u01ce\3\2\2\2\u01cc")
        buf.write("\u01ca\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01d1\3\2\2\2")
        buf.write("\u01ce\u01cc\3\2\2\2\u01cf\u01d0\7.\2\2\u01d0\u01d2\5")
        buf.write("\\/\2\u01d1\u01cf\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u01d5")
        buf.write("\3\2\2\2\u01d3\u01d6\5f\64\2\u01d4\u01d6\7L\2\2\u01d5")
        buf.write("\u01d3\3\2\2\2\u01d5\u01d4\3\2\2\2\u01d6-\3\2\2\2\u01d7")
        buf.write("\u01d8\5\22\n\2\u01d8\u01d9\5,\27\2\u01d9/\3\2\2\2\u01da")
        buf.write("\u01db\7r\2\2\u01db\u01de\5^\60\2\u01dc\u01dd\7.\2\2\u01dd")
        buf.write("\u01df\5\\/\2\u01de\u01dc\3\2\2\2\u01de\u01df\3\2\2\2")
        buf.write("\u01df\u01e0\3\2\2\2\u01e0\u01e1\5h\65\2\u01e1\61\3\2")
        buf.write("\2\2\u01e2\u01e3\5\22\n\2\u01e3\u01e4\5\60\31\2\u01e4")
        buf.write("\63\3\2\2\2\u01e5\u01e6\5R*\2\u01e6\u01e7\5F$\2\u01e7")
        buf.write("\u01e8\7L\2\2\u01e8\65\3\2\2\2\u01e9\u01ea\5R*\2\u01ea")
        buf.write("\u01eb\5F$\2\u01eb\u01ec\58\35\2\u01ec\67\3\2\2\2\u01ed")
        buf.write("\u01ee\7H\2\2\u01ee\u01f0\5\u0094K\2\u01ef\u01f1\5\u0094")
        buf.write("K\2\u01f0\u01ef\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f2")
        buf.write("\3\2\2\2\u01f2\u01f3\7I\2\2\u01f39\3\2\2\2\u01f4\u01f6")
        buf.write("\5\n\6\2\u01f5\u01f4\3\2\2\2\u01f6\u01f9\3\2\2\2\u01f7")
        buf.write("\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fa\3\2\2\2")
        buf.write("\u01f9\u01f7\3\2\2\2\u01fa\u01fd\5<\37\2\u01fb\u01fd\7")
        buf.write("L\2\2\u01fc\u01f7\3\2\2\2\u01fc\u01fb\3\2\2\2\u01fd;\3")
        buf.write("\2\2\2\u01fe\u0206\5> \2\u01ff\u0206\5B\"\2\u0200\u0206")
        buf.write("\5D#\2\u0201\u0206\5 \21\2\u0202\u0206\5z>\2\u0203\u0206")
        buf.write("\5\20\t\2\u0204\u0206\5\30\r\2\u0205\u01fe\3\2\2\2\u0205")
        buf.write("\u01ff\3\2\2\2\u0205\u0200\3\2\2\2\u0205\u0201\3\2\2\2")
        buf.write("\u0205\u0202\3\2\2\2\u0205\u0203\3\2\2\2\u0205\u0204\3")
        buf.write("\2\2\2\u0206=\3\2\2\2\u0207\u0208\5R*\2\u0208\u020d\5")
        buf.write("@!\2\u0209\u020a\7M\2\2\u020a\u020c\5@!\2\u020b\u0209")
        buf.write("\3\2\2\2\u020c\u020f\3\2\2\2\u020d\u020b\3\2\2\2\u020d")
        buf.write("\u020e\3\2\2\2\u020e\u0210\3\2\2\2\u020f\u020d\3\2\2\2")
        buf.write("\u0210\u0211\7L\2\2\u0211?\3\2\2\2\u0212\u0217\7r\2\2")
        buf.write("\u0213\u0214\7J\2\2\u0214\u0216\7K\2\2\u0215\u0213\3\2")
        buf.write("\2\2\u0216\u0219\3\2\2\2\u0217\u0215\3\2\2\2\u0217\u0218")
        buf.write("\3\2\2\2\u0218\u021a\3\2\2\2\u0219\u0217\3\2\2\2\u021a")
        buf.write("\u021b\7O\2\2\u021b\u021c\5L\'\2\u021cA\3\2\2\2\u021d")
        buf.write("\u0220\5R*\2\u021e\u0220\7\61\2\2\u021f\u021d\3\2\2\2")
        buf.write("\u021f\u021e\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0222\7")
        buf.write("r\2\2\u0222\u0227\5^\60\2\u0223\u0224\7J\2\2\u0224\u0226")
        buf.write("\7K\2\2\u0225\u0223\3\2\2\2\u0226\u0229\3\2\2\2\u0227")
        buf.write("\u0225\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u022c\3\2\2\2")
        buf.write("\u0229\u0227\3\2\2\2\u022a\u022b\7.\2\2\u022b\u022d\5")
        buf.write("\\/\2\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022e")
        buf.write("\3\2\2\2\u022e\u022f\7L\2\2\u022fC\3\2\2\2\u0230\u0231")
        buf.write("\5\22\n\2\u0231\u0232\5B\"\2\u0232E\3\2\2\2\u0233\u0238")
        buf.write("\5H%\2\u0234\u0235\7M\2\2\u0235\u0237\5H%\2\u0236\u0234")
        buf.write("\3\2\2\2\u0237\u023a\3\2\2\2\u0238\u0236\3\2\2\2\u0238")
        buf.write("\u0239\3\2\2\2\u0239G\3\2\2\2\u023a\u0238\3\2\2\2\u023b")
        buf.write("\u023e\5J&\2\u023c\u023d\7O\2\2\u023d\u023f\5L\'\2\u023e")
        buf.write("\u023c\3\2\2\2\u023e\u023f\3\2\2\2\u023fI\3\2\2\2\u0240")
        buf.write("\u0245\7r\2\2\u0241\u0242\7J\2\2\u0242\u0244\7K\2\2\u0243")
        buf.write("\u0241\3\2\2\2\u0244\u0247\3\2\2\2\u0245\u0243\3\2\2\2")
        buf.write("\u0245\u0246\3\2\2\2\u0246K\3\2\2\2\u0247\u0245\3\2\2")
        buf.write("\2\u0248\u024b\5N(\2\u0249\u024b\5\u00ba^\2\u024a\u0248")
        buf.write("\3\2\2\2\u024a\u0249\3\2\2\2\u024bM\3\2\2\2\u024c\u0258")
        buf.write("\7H\2\2\u024d\u0252\5L\'\2\u024e\u024f\7M\2\2\u024f\u0251")
        buf.write("\5L\'\2\u0250\u024e\3\2\2\2\u0251\u0254\3\2\2\2\u0252")
        buf.write("\u0250\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0256\3\2\2\2")
        buf.write("\u0254\u0252\3\2\2\2\u0255\u0257\7M\2\2\u0256\u0255\3")
        buf.write("\2\2\2\u0256\u0257\3\2\2\2\u0257\u0259\3\2\2\2\u0258\u024d")
        buf.write("\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025a\3\2\2\2\u025a")
        buf.write("\u025b\7I\2\2\u025bO\3\2\2\2\u025c\u025d\7r\2\2\u025d")
        buf.write("Q\3\2\2\2\u025e\u0263\5T+\2\u025f\u0260\7J\2\2\u0260\u0262")
        buf.write("\7K\2\2\u0261\u025f\3\2\2\2\u0262\u0265\3\2\2\2\u0263")
        buf.write("\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u026f\3\2\2\2")
        buf.write("\u0265\u0263\3\2\2\2\u0266\u026b\5V,\2\u0267\u0268\7J")
        buf.write("\2\2\u0268\u026a\7K\2\2\u0269\u0267\3\2\2\2\u026a\u026d")
        buf.write("\3\2\2\2\u026b\u0269\3\2\2\2\u026b\u026c\3\2\2\2\u026c")
        buf.write("\u026f\3\2\2\2\u026d\u026b\3\2\2\2\u026e\u025e\3\2\2\2")
        buf.write("\u026e\u0266\3\2\2\2\u026fS\3\2\2\2\u0270\u0272\7r\2\2")
        buf.write("\u0271\u0273\5X-\2\u0272\u0271\3\2\2\2\u0272\u0273\3\2")
        buf.write("\2\2\u0273\u027b\3\2\2\2\u0274\u0275\7N\2\2\u0275\u0277")
        buf.write("\7r\2\2\u0276\u0278\5X-\2\u0277\u0276\3\2\2\2\u0277\u0278")
        buf.write("\3\2\2\2\u0278\u027a\3\2\2\2\u0279\u0274\3\2\2\2\u027a")
        buf.write("\u027d\3\2\2\2\u027b\u0279\3\2\2\2\u027b\u027c\3\2\2\2")
        buf.write("\u027c\u0281\3\2\2\2\u027d\u027b\3\2\2\2\u027e\u027f\7")
        buf.write("\7\2\2\u027f\u0281\5X-\2\u0280\u0270\3\2\2\2\u0280\u027e")
        buf.write("\3\2\2\2\u0281U\3\2\2\2\u0282\u0283\t\4\2\2\u0283W\3\2")
        buf.write("\2\2\u0284\u0285\7Q\2\2\u0285\u028a\5Z.\2\u0286\u0287")
        buf.write("\7M\2\2\u0287\u0289\5Z.\2\u0288\u0286\3\2\2\2\u0289\u028c")
        buf.write("\3\2\2\2\u028a\u0288\3\2\2\2\u028a\u028b\3\2\2\2\u028b")
        buf.write("\u028d\3\2\2\2\u028c\u028a\3\2\2\2\u028d\u028e\7P\2\2")
        buf.write("\u028eY\3\2\2\2\u028f\u0296\5R*\2\u0290\u0293\7T\2\2\u0291")
        buf.write("\u0292\t\5\2\2\u0292\u0294\5R*\2\u0293\u0291\3\2\2\2\u0293")
        buf.write("\u0294\3\2\2\2\u0294\u0296\3\2\2\2\u0295\u028f\3\2\2\2")
        buf.write("\u0295\u0290\3\2\2\2\u0296[\3\2\2\2\u0297\u029c\5j\66")
        buf.write("\2\u0298\u0299\7M\2\2\u0299\u029b\5j\66\2\u029a\u0298")
        buf.write("\3\2\2\2\u029b\u029e\3\2\2\2\u029c\u029a\3\2\2\2\u029c")
        buf.write("\u029d\3\2\2\2\u029d]\3\2\2\2\u029e\u029c\3\2\2\2\u029f")
        buf.write("\u02a1\7F\2\2\u02a0\u02a2\5`\61\2\u02a1\u02a0\3\2\2\2")
        buf.write("\u02a1\u02a2\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a4\7")
        buf.write("G\2\2\u02a4_\3\2\2\2\u02a5\u02aa\5b\62\2\u02a6\u02a7\7")
        buf.write("M\2\2\u02a7\u02a9\5b\62\2\u02a8\u02a6\3\2\2\2\u02a9\u02ac")
        buf.write("\3\2\2\2\u02aa\u02a8\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab")
        buf.write("\u02af\3\2\2\2\u02ac\u02aa\3\2\2\2\u02ad\u02ae\7M\2\2")
        buf.write("\u02ae\u02b0\5d\63\2\u02af\u02ad\3\2\2\2\u02af\u02b0\3")
        buf.write("\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02b3\5d\63\2\u02b2\u02a5")
        buf.write("\3\2\2\2\u02b2\u02b1\3\2\2\2\u02b3a\3\2\2\2\u02b4\u02b6")
        buf.write("\5\16\b\2\u02b5\u02b4\3\2\2\2\u02b6\u02b9\3\2\2\2\u02b7")
        buf.write("\u02b5\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02ba\3\2\2\2")
        buf.write("\u02b9\u02b7\3\2\2\2\u02ba\u02bb\5R*\2\u02bb\u02bc\5J")
        buf.write("&\2\u02bcc\3\2\2\2\u02bd\u02bf\5\16\b\2\u02be\u02bd\3")
        buf.write("\2\2\2\u02bf\u02c2\3\2\2\2\u02c0\u02be\3\2\2\2\u02c0\u02c1")
        buf.write("\3\2\2\2\u02c1\u02c3\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c3")
        buf.write("\u02c4\5R*\2\u02c4\u02c5\7t\2\2\u02c5\u02c6\5J&\2\u02c6")
        buf.write("e\3\2\2\2\u02c7\u02c8\5\u008aF\2\u02c8g\3\2\2\2\u02c9")
        buf.write("\u02ca\5\u008aF\2\u02cai\3\2\2\2\u02cb\u02d0\7r\2\2\u02cc")
        buf.write("\u02cd\7N\2\2\u02cd\u02cf\7r\2\2\u02ce\u02cc\3\2\2\2\u02cf")
        buf.write("\u02d2\3\2\2\2\u02d0\u02ce\3\2\2\2\u02d0\u02d1\3\2\2\2")
        buf.write("\u02d1k\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d3\u02d4\t\6\2")
        buf.write("\2\u02d4m\3\2\2\2\u02d5\u02d6\7s\2\2\u02d6\u02dd\5p9\2")
        buf.write("\u02d7\u02da\7F\2\2\u02d8\u02db\5r:\2\u02d9\u02db\5v<")
        buf.write("\2\u02da\u02d8\3\2\2\2\u02da\u02d9\3\2\2\2\u02da\u02db")
        buf.write("\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02de\7G\2\2\u02dd")
        buf.write("\u02d7\3\2\2\2\u02dd\u02de\3\2\2\2\u02deo\3\2\2\2\u02df")
        buf.write("\u02e0\5j\66\2\u02e0q\3\2\2\2\u02e1\u02e6\5t;\2\u02e2")
        buf.write("\u02e3\7M\2\2\u02e3\u02e5\5t;\2\u02e4\u02e2\3\2\2\2\u02e5")
        buf.write("\u02e8\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e6\u02e7\3\2\2\2")
        buf.write("\u02e7s\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e9\u02ea\7r\2\2")
        buf.write("\u02ea\u02eb\7O\2\2\u02eb\u02ec\5v<\2\u02ecu\3\2\2\2\u02ed")
        buf.write("\u02f1\5\u00ba^\2\u02ee\u02f1\5n8\2\u02ef\u02f1\5x=\2")
        buf.write("\u02f0\u02ed\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f0\u02ef\3")
        buf.write("\2\2\2\u02f1w\3\2\2\2\u02f2\u02fb\7H\2\2\u02f3\u02f8\5")
        buf.write("v<\2\u02f4\u02f5\7M\2\2\u02f5\u02f7\5v<\2\u02f6\u02f4")
        buf.write("\3\2\2\2\u02f7\u02fa\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f8")
        buf.write("\u02f9\3\2\2\2\u02f9\u02fc\3\2\2\2\u02fa\u02f8\3\2\2\2")
        buf.write("\u02fb\u02f3\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fe\3")
        buf.write("\2\2\2\u02fd\u02ff\7M\2\2\u02fe\u02fd\3\2\2\2\u02fe\u02ff")
        buf.write("\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0301\7I\2\2\u0301")
        buf.write("y\3\2\2\2\u0302\u0303\7s\2\2\u0303\u0304\7 \2\2\u0304")
        buf.write("\u0305\7r\2\2\u0305\u0306\5|?\2\u0306{\3\2\2\2\u0307\u030b")
        buf.write("\7H\2\2\u0308\u030a\5~@\2\u0309\u0308\3\2\2\2\u030a\u030d")
        buf.write("\3\2\2\2\u030b\u0309\3\2\2\2\u030b\u030c\3\2\2\2\u030c")
        buf.write("\u030e\3\2\2\2\u030d\u030b\3\2\2\2\u030e\u030f\7I\2\2")
        buf.write("\u030f}\3\2\2\2\u0310\u0312\5\n\6\2\u0311\u0310\3\2\2")
        buf.write("\2\u0312\u0315\3\2\2\2\u0313\u0311\3\2\2\2\u0313\u0314")
        buf.write("\3\2\2\2\u0314\u0316\3\2\2\2\u0315\u0313\3\2\2\2\u0316")
        buf.write("\u0319\5\u0080A\2\u0317\u0319\7L\2\2\u0318\u0313\3\2\2")
        buf.write("\2\u0318\u0317\3\2\2\2\u0319\177\3\2\2\2\u031a\u031b\5")
        buf.write("R*\2\u031b\u031c\5\u0082B\2\u031c\u031d\7L\2\2\u031d\u032f")
        buf.write("\3\2\2\2\u031e\u0320\5\20\t\2\u031f\u0321\7L\2\2\u0320")
        buf.write("\u031f\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u032f\3\2\2\2")
        buf.write("\u0322\u0324\5 \21\2\u0323\u0325\7L\2\2\u0324\u0323\3")
        buf.write("\2\2\2\u0324\u0325\3\2\2\2\u0325\u032f\3\2\2\2\u0326\u0328")
        buf.write("\5\30\r\2\u0327\u0329\7L\2\2\u0328\u0327\3\2\2\2\u0328")
        buf.write("\u0329\3\2\2\2\u0329\u032f\3\2\2\2\u032a\u032c\5z>\2\u032b")
        buf.write("\u032d\7L\2\2\u032c\u032b\3\2\2\2\u032c\u032d\3\2\2\2")
        buf.write("\u032d\u032f\3\2\2\2\u032e\u031a\3\2\2\2\u032e\u031e\3")
        buf.write("\2\2\2\u032e\u0322\3\2\2\2\u032e\u0326\3\2\2\2\u032e\u032a")
        buf.write("\3\2\2\2\u032f\u0081\3\2\2\2\u0330\u0333\5\u0084C\2\u0331")
        buf.write("\u0333\5\u0086D\2\u0332\u0330\3\2\2\2\u0332\u0331\3\2")
        buf.write("\2\2\u0333\u0083\3\2\2\2\u0334\u0335\7r\2\2\u0335\u0336")
        buf.write("\7F\2\2\u0336\u0338\7G\2\2\u0337\u0339\5\u0088E\2\u0338")
        buf.write("\u0337\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u0085\3\2\2\2")
        buf.write("\u033a\u033b\5F$\2\u033b\u0087\3\2\2\2\u033c\u033d\7\21")
        buf.write("\2\2\u033d\u033e\5v<\2\u033e\u0089\3\2\2\2\u033f\u0343")
        buf.write("\7H\2\2\u0340\u0342\5\u008cG\2\u0341\u0340\3\2\2\2\u0342")
        buf.write("\u0345\3\2\2\2\u0343\u0341\3\2\2\2\u0343\u0344\3\2\2\2")
        buf.write("\u0344\u0346\3\2\2\2\u0345\u0343\3\2\2\2\u0346\u0347\7")
        buf.write("I\2\2\u0347\u008b\3\2\2\2\u0348\u034c\5\u008eH\2\u0349")
        buf.write("\u034c\5\u0092J\2\u034a\u034c\5\b\5\2\u034b\u0348\3\2")
        buf.write("\2\2\u034b\u0349\3\2\2\2\u034b\u034a\3\2\2\2\u034c\u008d")
        buf.write("\3\2\2\2\u034d\u034e\5\u0090I\2\u034e\u034f\7L\2\2\u034f")
        buf.write("\u008f\3\2\2\2\u0350\u0352\5\16\b\2\u0351\u0350\3\2\2")
        buf.write("\2\u0352\u0355\3\2\2\2\u0353\u0351\3\2\2\2\u0353\u0354")
        buf.write("\3\2\2\2\u0354\u0356\3\2\2\2\u0355\u0353\3\2\2\2\u0356")
        buf.write("\u0357\5R*\2\u0357\u0358\5F$\2\u0358\u0091\3\2\2\2\u0359")
        buf.write("\u03ae\5\u008aF\2\u035a\u035b\7\32\2\2\u035b\u035c\5\u00ae")
        buf.write("X\2\u035c\u035f\5\u0092J\2\u035d\u035e\7\23\2\2\u035e")
        buf.write("\u0360\5\u0092J\2\u035f\u035d\3\2\2\2\u035f\u0360\3\2")
        buf.write("\2\2\u0360\u03ae\3\2\2\2\u0361\u0362\7\31\2\2\u0362\u0363")
        buf.write("\7F\2\2\u0363\u0364\5\u00a6T\2\u0364\u0365\7G\2\2\u0365")
        buf.write("\u0366\5\u0092J\2\u0366\u03ae\3\2\2\2\u0367\u0368\7\63")
        buf.write("\2\2\u0368\u0369\5\u00aeX\2\u0369\u036a\5\u0092J\2\u036a")
        buf.write("\u03ae\3\2\2\2\u036b\u036c\7\22\2\2\u036c\u036d\5\u0092")
        buf.write("J\2\u036d\u036e\7\63\2\2\u036e\u036f\5\u00aeX\2\u036f")
        buf.write("\u0370\7L\2\2\u0370\u03ae\3\2\2\2\u0371\u0372\7?\2\2\u0372")
        buf.write("\u0373\7F\2\2\u0373\u0374\5\u00ba^\2\u0374\u0375\7G\2")
        buf.write("\2\u0375\u0376\5\u0092J\2\u0376\u03ae\3\2\2\2\u0377\u0378")
        buf.write("\7\60\2\2\u0378\u0382\5\u008aF\2\u0379\u037b\5\u009aN")
        buf.write("\2\u037a\u0379\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037a")
        buf.write("\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037f\3\2\2\2\u037e")
        buf.write("\u0380\5\u009eP\2\u037f\u037e\3\2\2\2\u037f\u0380\3\2")
        buf.write("\2\2\u0380\u0383\3\2\2\2\u0381\u0383\5\u009eP\2\u0382")
        buf.write("\u037a\3\2\2\2\u0382\u0381\3\2\2\2\u0383\u03ae\3\2\2\2")
        buf.write("\u0384\u0385\7\60\2\2\u0385\u0386\5\u00a0Q\2\u0386\u038a")
        buf.write("\5\u008aF\2\u0387\u0389\5\u009aN\2\u0388\u0387\3\2\2\2")
        buf.write("\u0389\u038c\3\2\2\2\u038a\u0388\3\2\2\2\u038a\u038b\3")
        buf.write("\2\2\2\u038b\u038e\3\2\2\2\u038c\u038a\3\2\2\2\u038d\u038f")
        buf.write("\5\u009eP\2\u038e\u038d\3\2\2\2\u038e\u038f\3\2\2\2\u038f")
        buf.write("\u03ae\3\2\2\2\u0390\u0392\7\'\2\2\u0391\u0393\5\u00ba")
        buf.write("^\2\u0392\u0391\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0394")
        buf.write("\3\2\2\2\u0394\u03ae\7L\2\2\u0395\u0396\7-\2\2\u0396\u0397")
        buf.write("\5\u00ba^\2\u0397\u0398\7L\2\2\u0398\u03ae\3\2\2\2\u0399")
        buf.write("\u039b\7\n\2\2\u039a\u039c\7r\2\2\u039b\u039a\3\2\2\2")
        buf.write("\u039b\u039c\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u03ae\7")
        buf.write("L\2\2\u039e\u03a0\7\20\2\2\u039f\u03a1\7r\2\2\u03a0\u039f")
        buf.write("\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2")
        buf.write("\u03ae\7L\2\2\u03a3\u03ae\7L\2\2\u03a4\u03a5\5\u00b2Z")
        buf.write("\2\u03a5\u03a6\7L\2\2\u03a6\u03ae\3\2\2\2\u03a7\u03a8")
        buf.write("\7r\2\2\u03a8\u03a9\7U\2\2\u03a9\u03ae\5\u0092J\2\u03aa")
        buf.write("\u03ab\5\u00b8]\2\u03ab\u03ac\7L\2\2\u03ac\u03ae\3\2\2")
        buf.write("\2\u03ad\u0359\3\2\2\2\u03ad\u035a\3\2\2\2\u03ad\u0361")
        buf.write("\3\2\2\2\u03ad\u0367\3\2\2\2\u03ad\u036b\3\2\2\2\u03ad")
        buf.write("\u0371\3\2\2\2\u03ad\u0377\3\2\2\2\u03ad\u0384\3\2\2\2")
        buf.write("\u03ad\u0390\3\2\2\2\u03ad\u0395\3\2\2\2\u03ad\u0399\3")
        buf.write("\2\2\2\u03ad\u039e\3\2\2\2\u03ad\u03a3\3\2\2\2\u03ad\u03a4")
        buf.write("\3\2\2\2\u03ad\u03a7\3\2\2\2\u03ad\u03aa\3\2\2\2\u03ae")
        buf.write("\u0093\3\2\2\2\u03af\u03b1\5\n\6\2\u03b0\u03af\3\2\2\2")
        buf.write("\u03b1\u03b4\3\2\2\2\u03b2\u03b0\3\2\2\2\u03b2\u03b3\3")
        buf.write("\2\2\2\u03b3\u03b7\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b5\u03b8")
        buf.write("\5\u0096L\2\u03b6\u03b8\5\u0098M\2\u03b7\u03b5\3\2\2\2")
        buf.write("\u03b7\u03b6\3\2\2\2\u03b8\u0095\3\2\2\2\u03b9\u03bc\7")
        buf.write("\b\2\2\u03ba\u03bd\7L\2\2\u03bb\u03bd\5f\64\2\u03bc\u03ba")
        buf.write("\3\2\2\2\u03bc\u03bb\3\2\2\2\u03bd\u0097\3\2\2\2\u03be")
        buf.write("\u03c1\7\7\2\2\u03bf\u03c2\7L\2\2\u03c0\u03c2\5f\64\2")
        buf.write("\u03c1\u03bf\3\2\2\2\u03c1\u03c0\3\2\2\2\u03c2\u0099\3")
        buf.write("\2\2\2\u03c3\u03c4\7\f\2\2\u03c4\u03c8\7F\2\2\u03c5\u03c7")
        buf.write("\5\16\b\2\u03c6\u03c5\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8")
        buf.write("\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03cb\3\2\2\2")
        buf.write("\u03ca\u03c8\3\2\2\2\u03cb\u03cc\5\u009cO\2\u03cc\u03cd")
        buf.write("\7r\2\2\u03cd\u03ce\7G\2\2\u03ce\u03cf\5\u008aF\2\u03cf")
        buf.write("\u009b\3\2\2\2\u03d0\u03d5\5j\66\2\u03d1\u03d2\7c\2\2")
        buf.write("\u03d2\u03d4\5j\66\2\u03d3\u03d1\3\2\2\2\u03d4\u03d7\3")
        buf.write("\2\2\2\u03d5\u03d3\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u009d")
        buf.write("\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d8\u03d9\7\27\2\2\u03d9")
        buf.write("\u03da\5\u008aF\2\u03da\u009f\3\2\2\2\u03db\u03dc\7F\2")
        buf.write("\2\u03dc\u03de\5\u00a2R\2\u03dd\u03df\7L\2\2\u03de\u03dd")
        buf.write("\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0")
        buf.write("\u03e1\7G\2\2\u03e1\u00a1\3\2\2\2\u03e2\u03e7\5\u00a4")
        buf.write("S\2\u03e3\u03e4\7L\2\2\u03e4\u03e6\5\u00a4S\2\u03e5\u03e3")
        buf.write("\3\2\2\2\u03e6\u03e9\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e7")
        buf.write("\u03e8\3\2\2\2\u03e8\u00a3\3\2\2\2\u03e9\u03e7\3\2\2\2")
        buf.write("\u03ea\u03ec\5\16\b\2\u03eb\u03ea\3\2\2\2\u03ec\u03ef")
        buf.write("\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee")
        buf.write("\u03f0\3\2\2\2\u03ef\u03ed\3\2\2\2\u03f0\u03f1\5T+\2\u03f1")
        buf.write("\u03f2\5J&\2\u03f2\u03f3\7O\2\2\u03f3\u03f4\5\u00ba^\2")
        buf.write("\u03f4\u00a5\3\2\2\2\u03f5\u0402\5\u00aaV\2\u03f6\u03f8")
        buf.write("\5\u00a8U\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8")
        buf.write("\u03f9\3\2\2\2\u03f9\u03fb\7L\2\2\u03fa\u03fc\5\u00ba")
        buf.write("^\2\u03fb\u03fa\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd")
        buf.write("\3\2\2\2\u03fd\u03ff\7L\2\2\u03fe\u0400\5\u00acW\2\u03ff")
        buf.write("\u03fe\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0402\3\2\2\2")
        buf.write("\u0401\u03f5\3\2\2\2\u0401\u03f7\3\2\2\2\u0402\u00a7\3")
        buf.write("\2\2\2\u0403\u0406\5\u0090I\2\u0404\u0406\5\u00b0Y\2\u0405")
        buf.write("\u0403\3\2\2\2\u0405\u0404\3\2\2\2\u0406\u00a9\3\2\2\2")
        buf.write("\u0407\u0409\5\16\b\2\u0408\u0407\3\2\2\2\u0409\u040c")
        buf.write("\3\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b\3\2\2\2\u040b")
        buf.write("\u040d\3\2\2\2\u040c\u040a\3\2\2\2\u040d\u040e\5R*\2\u040e")
        buf.write("\u040f\5J&\2\u040f\u0410\7U\2\2\u0410\u0411\5\u00ba^\2")
        buf.write("\u0411\u00ab\3\2\2\2\u0412\u0413\5\u00b0Y\2\u0413\u00ad")
        buf.write("\3\2\2\2\u0414\u0415\7F\2\2\u0415\u0416\5\u00ba^\2\u0416")
        buf.write("\u0417\7G\2\2\u0417\u00af\3\2\2\2\u0418\u041d\5\u00ba")
        buf.write("^\2\u0419\u041a\7M\2\2\u041a\u041c\5\u00ba^\2\u041b\u0419")
        buf.write("\3\2\2\2\u041c\u041f\3\2\2\2\u041d\u041b\3\2\2\2\u041d")
        buf.write("\u041e\3\2\2\2\u041e\u00b1\3\2\2\2\u041f\u041d\3\2\2\2")
        buf.write("\u0420\u0421\5\u00ba^\2\u0421\u00b3\3\2\2\2\u0422\u0423")
        buf.write("\5\u00ba^\2\u0423\u00b5\3\2\2\2\u0424\u0425\7:\2\2\u0425")
        buf.write("\u0429\5\u00ba^\2\u0426\u0428\5\u00ba^\2\u0427\u0426\3")
        buf.write("\2\2\2\u0428\u042b\3\2\2\2\u0429\u0427\3\2\2\2\u0429\u042a")
        buf.write("\3\2\2\2\u042a\u00b7\3\2\2\2\u042b\u0429\3\2\2\2\u042c")
        buf.write("\u042d\t\7\2\2\u042d\u0430\5\u00ba^\2\u042e\u0430\5\u00b6")
        buf.write("\\\2\u042f\u042c\3\2\2\2\u042f\u042e\3\2\2\2\u0430\u00b9")
        buf.write("\3\2\2\2\u0431\u0432\b^\1\2\u0432\u043f\5\u00bc_\2\u0433")
        buf.write("\u0434\7\"\2\2\u0434\u043f\5\u00be`\2\u0435\u0436\7F\2")
        buf.write("\2\u0436\u0437\5R*\2\u0437\u0438\7G\2\2\u0438\u0439\5")
        buf.write("\u00ba^\23\u0439\u043f\3\2\2\2\u043a\u043b\t\b\2\2\u043b")
        buf.write("\u043f\5\u00ba^\21\u043c\u043d\t\t\2\2\u043d\u043f\5\u00ba")
        buf.write("^\20\u043e\u0431\3\2\2\2\u043e\u0433\3\2\2\2\u043e\u0435")
        buf.write("\3\2\2\2\u043e\u043a\3\2\2\2\u043e\u043c\3\2\2\2\u043f")
        buf.write("\u04a4\3\2\2\2\u0440\u0441\f\17\2\2\u0441\u0442\t\n\2")
        buf.write("\2\u0442\u04a3\5\u00ba^\20\u0443\u0444\f\16\2\2\u0444")
        buf.write("\u0445\t\13\2\2\u0445\u04a3\5\u00ba^\17\u0446\u044e\f")
        buf.write("\r\2\2\u0447\u0448\7Q\2\2\u0448\u044f\7Q\2\2\u0449\u044a")
        buf.write("\7P\2\2\u044a\u044b\7P\2\2\u044b\u044f\7P\2\2\u044c\u044d")
        buf.write("\7P\2\2\u044d\u044f\7P\2\2\u044e\u0447\3\2\2\2\u044e\u0449")
        buf.write("\3\2\2\2\u044e\u044c\3\2\2\2\u044f\u0450\3\2\2\2\u0450")
        buf.write("\u04a3\5\u00ba^\16\u0451\u0452\f\f\2\2\u0452\u0453\t\f")
        buf.write("\2\2\u0453\u04a3\5\u00ba^\r\u0454\u0455\f\n\2\2\u0455")
        buf.write("\u0456\t\r\2\2\u0456\u04a3\5\u00ba^\13\u0457\u0458\f\t")
        buf.write("\2\2\u0458\u0459\7b\2\2\u0459\u04a3\5\u00ba^\n\u045a\u045b")
        buf.write("\f\b\2\2\u045b\u045c\7d\2\2\u045c\u04a3\5\u00ba^\t\u045d")
        buf.write("\u045e\f\7\2\2\u045e\u045f\7c\2\2\u045f\u04a3\5\u00ba")
        buf.write("^\b\u0460\u0461\f\6\2\2\u0461\u0462\7Z\2\2\u0462\u04a3")
        buf.write("\5\u00ba^\7\u0463\u0464\f\5\2\2\u0464\u0465\7[\2\2\u0465")
        buf.write("\u04a3\5\u00ba^\6\u0466\u0467\f\4\2\2\u0467\u0468\7T\2")
        buf.write("\2\u0468\u0469\5\u00ba^\2\u0469\u046a\7U\2\2\u046a\u046b")
        buf.write("\5\u00ba^\5\u046b\u04a3\3\2\2\2\u046c\u046d\f\3\2\2\u046d")
        buf.write("\u046e\t\16\2\2\u046e\u04a3\5\u00ba^\3\u046f\u0470\f\36")
        buf.write("\2\2\u0470\u0471\7N\2\2\u0471\u0472\7\b\2\2\u0472\u0474")
        buf.write("\7F\2\2\u0473\u0475\5\u00b0Y\2\u0474\u0473\3\2\2\2\u0474")
        buf.write("\u0475\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u04a3\7G\2\2")
        buf.write("\u0477\u0478\f\35\2\2\u0478\u0479\7N\2\2\u0479\u047a\7")
        buf.write("\7\2\2\u047a\u047c\7F\2\2\u047b\u047d\5\u00b0Y\2\u047c")
        buf.write("\u047b\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u047e\3\2\2\2")
        buf.write("\u047e\u04a3\7G\2\2\u047f\u0480\f\34\2\2\u0480\u0481\7")
        buf.write("N\2\2\u0481\u04a3\7r\2\2\u0482\u0483\f\33\2\2\u0483\u0484")
        buf.write("\7N\2\2\u0484\u04a3\7,\2\2\u0485\u0486\f\32\2\2\u0486")
        buf.write("\u0487\7N\2\2\u0487\u04a3\7\"\2\2\u0488\u0489\f\31\2\2")
        buf.write("\u0489\u048a\7N\2\2\u048a\u04a3\t\17\2\2\u048b\u048c\f")
        buf.write("\30\2\2\u048c\u048d\7N\2\2\u048d\u048e\7*\2\2\u048e\u04a3")
        buf.write("\5\u00d4k\2\u048f\u0490\f\27\2\2\u0490\u0491\7N\2\2\u0491")
        buf.write("\u04a3\5\u00ccg\2\u0492\u0493\f\26\2\2\u0493\u0494\7J")
        buf.write("\2\2\u0494\u0495\5\u00ba^\2\u0495\u0496\7K\2\2\u0496\u04a3")
        buf.write("\3\2\2\2\u0497\u0498\f\25\2\2\u0498\u049a\7F\2\2\u0499")
        buf.write("\u049b\5\u00b0Y\2\u049a\u0499\3\2\2\2\u049a\u049b\3\2")
        buf.write("\2\2\u049b\u049c\3\2\2\2\u049c\u04a3\7G\2\2\u049d\u049e")
        buf.write("\f\22\2\2\u049e\u04a3\t\20\2\2\u049f\u04a0\f\13\2\2\u04a0")
        buf.write("\u04a1\7\36\2\2\u04a1\u04a3\5R*\2\u04a2\u0440\3\2\2\2")
        buf.write("\u04a2\u0443\3\2\2\2\u04a2\u0446\3\2\2\2\u04a2\u0451\3")
        buf.write("\2\2\2\u04a2\u0454\3\2\2\2\u04a2\u0457\3\2\2\2\u04a2\u045a")
        buf.write("\3\2\2\2\u04a2\u045d\3\2\2\2\u04a2\u0460\3\2\2\2\u04a2")
        buf.write("\u0463\3\2\2\2\u04a2\u0466\3\2\2\2\u04a2\u046c\3\2\2\2")
        buf.write("\u04a2\u046f\3\2\2\2\u04a2\u0477\3\2\2\2\u04a2\u047f\3")
        buf.write("\2\2\2\u04a2\u0482\3\2\2\2\u04a2\u0485\3\2\2\2\u04a2\u0488")
        buf.write("\3\2\2\2\u04a2\u048b\3\2\2\2\u04a2\u048f\3\2\2\2\u04a2")
        buf.write("\u0492\3\2\2\2\u04a2\u0497\3\2\2\2\u04a2\u049d\3\2\2\2")
        buf.write("\u04a2\u049f\3\2\2\2\u04a3\u04a6\3\2\2\2\u04a4\u04a2\3")
        buf.write("\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u00bb\3\2\2\2\u04a6\u04a4")
        buf.write("\3\2\2\2\u04a7\u04a8\7F\2\2\u04a8\u04a9\5\u00ba^\2\u04a9")
        buf.write("\u04aa\7G\2\2\u04aa\u04be\3\2\2\2\u04ab\u04be\7,\2\2\u04ac")
        buf.write("\u04be\7*\2\2\u04ad\u04be\5l\67\2\u04ae\u04be\7r\2\2\u04af")
        buf.write("\u04b0\5R*\2\u04b0\u04b1\7N\2\2\u04b1\u04b2\7\16\2\2\u04b2")
        buf.write("\u04be\3\2\2\2\u04b3\u04b4\7\61\2\2\u04b4\u04b5\7N\2\2")
        buf.write("\u04b5\u04be\7\16\2\2\u04b6\u04ba\5\u00ceh\2\u04b7\u04bb")
        buf.write("\5\u00d6l\2\u04b8\u04b9\7,\2\2\u04b9\u04bb\5\u00d8m\2")
        buf.write("\u04ba\u04b7\3\2\2\2\u04ba\u04b8\3\2\2\2\u04bb\u04be\3")
        buf.write("\2\2\2\u04bc\u04be\7\4\2\2\u04bd\u04a7\3\2\2\2\u04bd\u04ab")
        buf.write("\3\2\2\2\u04bd\u04ac\3\2\2\2\u04bd\u04ad\3\2\2\2\u04bd")
        buf.write("\u04ae\3\2\2\2\u04bd\u04af\3\2\2\2\u04bd\u04b3\3\2\2\2")
        buf.write("\u04bd\u04b6\3\2\2\2\u04bd\u04bc\3\2\2\2\u04be\u00bd\3")
        buf.write("\2\2\2\u04bf\u04c0\5\u00ceh\2\u04c0\u04c1\5\u00c0a\2\u04c1")
        buf.write("\u04c2\5\u00caf\2\u04c2\u04cb\3\2\2\2\u04c3\u04c8\5\u00c0")
        buf.write("a\2\u04c4\u04c9\5\u00c4c\2\u04c5\u04c9\5\u00caf\2\u04c6")
        buf.write("\u04c9\5\u00c6d\2\u04c7\u04c9\5\u00c8e\2\u04c8\u04c4\3")
        buf.write("\2\2\2\u04c8\u04c5\3\2\2\2\u04c8\u04c6\3\2\2\2\u04c8\u04c7")
        buf.write("\3\2\2\2\u04c9\u04cb\3\2\2\2\u04ca\u04bf\3\2\2\2\u04ca")
        buf.write("\u04c3\3\2\2\2\u04cb\u00bf\3\2\2\2\u04cc\u04ce\7r\2\2")
        buf.write("\u04cd\u04cf\5\u00d0i\2\u04ce\u04cd\3\2\2\2\u04ce\u04cf")
        buf.write("\3\2\2\2\u04cf\u04d7\3\2\2\2\u04d0\u04d1\7N\2\2\u04d1")
        buf.write("\u04d3\7r\2\2\u04d2\u04d4\5\u00d0i\2\u04d3\u04d2\3\2\2")
        buf.write("\2\u04d3\u04d4\3\2\2\2\u04d4\u04d6\3\2\2\2\u04d5\u04d0")
        buf.write("\3\2\2\2\u04d6\u04d9\3\2\2\2\u04d7\u04d5\3\2\2\2\u04d7")
        buf.write("\u04d8\3\2\2\2\u04d8\u04de\3\2\2\2\u04d9\u04d7\3\2\2\2")
        buf.write("\u04da\u04de\5V,\2\u04db\u04dc\7\7\2\2\u04dc\u04de\5\u00d0")
        buf.write("i\2\u04dd\u04cc\3\2\2\2\u04dd\u04da\3\2\2\2\u04dd\u04db")
        buf.write("\3\2\2\2\u04de\u00c1\3\2\2\2\u04df\u04e1\7r\2\2\u04e0")
        buf.write("\u04e2\5\u00d2j\2\u04e1\u04e0\3\2\2\2\u04e1\u04e2\3\2")
        buf.write("\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e4\5\u00caf\2\u04e4")
        buf.write("\u00c3\3\2\2\2\u04e5\u0501\7J\2\2\u04e6\u04eb\7K\2\2\u04e7")
        buf.write("\u04e8\7J\2\2\u04e8\u04ea\7K\2\2\u04e9\u04e7\3\2\2\2\u04ea")
        buf.write("\u04ed\3\2\2\2\u04eb\u04e9\3\2\2\2\u04eb\u04ec\3\2\2\2")
        buf.write("\u04ec\u04ee\3\2\2\2\u04ed\u04eb\3\2\2\2\u04ee\u0502\5")
        buf.write("N(\2\u04ef\u04f0\5\u00ba^\2\u04f0\u04f7\7K\2\2\u04f1\u04f2")
        buf.write("\7J\2\2\u04f2\u04f3\5\u00ba^\2\u04f3\u04f4\7K\2\2\u04f4")
        buf.write("\u04f6\3\2\2\2\u04f5\u04f1\3\2\2\2\u04f6\u04f9\3\2\2\2")
        buf.write("\u04f7\u04f5\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04fe\3")
        buf.write("\2\2\2\u04f9\u04f7\3\2\2\2\u04fa\u04fb\7J\2\2\u04fb\u04fd")
        buf.write("\7K\2\2\u04fc\u04fa\3\2\2\2\u04fd\u0500\3\2\2\2\u04fe")
        buf.write("\u04fc\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0502\3\2\2\2")
        buf.write("\u0500\u04fe\3\2\2\2\u0501\u04e6\3\2\2\2\u0501\u04ef\3")
        buf.write("\2\2\2\u0502\u00c5\3\2\2\2\u0503\u051f\7H\2\2\u0504\u0520")
        buf.write("\7I\2\2\u0505\u0508\7r\2\2\u0506\u0508\5\u00ba^\2\u0507")
        buf.write("\u0505\3\2\2\2\u0507\u0506\3\2\2\2\u0508\u0509\3\2\2\2")
        buf.write("\u0509\u050c\7q\2\2\u050a\u050d\5l\67\2\u050b\u050d\5")
        buf.write("\u00ba^\2\u050c\u050a\3\2\2\2\u050c\u050b\3\2\2\2\u050d")
        buf.write("\u051a\3\2\2\2\u050e\u0511\7M\2\2\u050f\u0512\7r\2\2\u0510")
        buf.write("\u0512\5\u00ba^\2\u0511\u050f\3\2\2\2\u0511\u0510\3\2")
        buf.write("\2\2\u0512\u0513\3\2\2\2\u0513\u0516\7q\2\2\u0514\u0517")
        buf.write("\5l\67\2\u0515\u0517\5\u00ba^\2\u0516\u0514\3\2\2\2\u0516")
        buf.write("\u0515\3\2\2\2\u0517\u0519\3\2\2\2\u0518\u050e\3\2\2\2")
        buf.write("\u0519\u051c\3\2\2\2\u051a\u0518\3\2\2\2\u051a\u051b\3")
        buf.write("\2\2\2\u051b\u051d\3\2\2\2\u051c\u051a\3\2\2\2\u051d\u051e")
        buf.write("\7I\2\2\u051e\u0520\3\2\2\2\u051f\u0504\3\2\2\2\u051f")
        buf.write("\u0507\3\2\2\2\u0520\u00c7\3\2\2\2\u0521\u0533\7H\2\2")
        buf.write("\u0522\u0534\7I\2\2\u0523\u0526\5l\67\2\u0524\u0526\5")
        buf.write("\u00ba^\2\u0525\u0523\3\2\2\2\u0525\u0524\3\2\2\2\u0526")
        buf.write("\u052e\3\2\2\2\u0527\u052a\7M\2\2\u0528\u052b\5l\67\2")
        buf.write("\u0529\u052b\5\u00ba^\2\u052a\u0528\3\2\2\2\u052a\u0529")
        buf.write("\3\2\2\2\u052b\u052d\3\2\2\2\u052c\u0527\3\2\2\2\u052d")
        buf.write("\u0530\3\2\2\2\u052e\u052c\3\2\2\2\u052e\u052f\3\2\2\2")
        buf.write("\u052f\u0531\3\2\2\2\u0530\u052e\3\2\2\2\u0531\u0532\7")
        buf.write("I\2\2\u0532\u0534\3\2\2\2\u0533\u0522\3\2\2\2\u0533\u0525")
        buf.write("\3\2\2\2\u0534\u00c9\3\2\2\2\u0535\u0537\5\u00d8m\2\u0536")
        buf.write("\u0538\5$\23\2\u0537\u0536\3\2\2\2\u0537\u0538\3\2\2\2")
        buf.write("\u0538\u00cb\3\2\2\2\u0539\u053a\5\u00ceh\2\u053a\u053b")
        buf.write("\5\u00d6l\2\u053b\u00cd\3\2\2\2\u053c\u053d\7Q\2\2\u053d")
        buf.write("\u053e\5\"\22\2\u053e\u053f\7P\2\2\u053f\u00cf\3\2\2\2")
        buf.write("\u0540\u0541\7Q\2\2\u0541\u0544\7P\2\2\u0542\u0544\5X")
        buf.write("-\2\u0543\u0540\3\2\2\2\u0543\u0542\3\2\2\2\u0544\u00d1")
        buf.write("\3\2\2\2\u0545\u0546\7Q\2\2\u0546\u0549\7P\2\2\u0547\u0549")
        buf.write("\5\u00ceh\2\u0548\u0545\3\2\2\2\u0548\u0547\3\2\2\2\u0549")
        buf.write("\u00d3\3\2\2\2\u054a\u0551\5\u00d8m\2\u054b\u054c\7N\2")
        buf.write("\2\u054c\u054e\7r\2\2\u054d\u054f\5\u00d8m\2\u054e\u054d")
        buf.write("\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0551\3\2\2\2\u0550")
        buf.write("\u054a\3\2\2\2\u0550\u054b\3\2\2\2\u0551\u00d5\3\2\2\2")
        buf.write("\u0552\u0553\7*\2\2\u0553\u0557\5\u00d4k\2\u0554\u0555")
        buf.write("\7r\2\2\u0555\u0557\5\u00d8m\2\u0556\u0552\3\2\2\2\u0556")
        buf.write("\u0554\3\2\2\2\u0557\u00d7\3\2\2\2\u0558\u055a\7F\2\2")
        buf.write("\u0559\u055b\5\u00b0Y\2\u055a\u0559\3\2\2\2\u055a\u055b")
        buf.write("\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u055d\7G\2\2\u055d")
        buf.write("\u00d9\3\2\2\2\u00a5\u00db\u00e0\u00e6\u00ee\u00f7\u00fc")
        buf.write("\u0103\u010a\u0111\u0118\u011d\u0121\u0125\u0129\u012e")
        buf.write("\u0132\u0136\u0140\u0148\u014f\u0156\u015a\u015d\u0160")
        buf.write("\u0169\u016f\u0174\u0177\u017d\u0183\u0187\u0190\u0197")
        buf.write("\u01a0\u01a7\u01ad\u01b1\u01bd\u01c0\u01c4\u01cc\u01d1")
        buf.write("\u01d5\u01de\u01f0\u01f7\u01fc\u0205\u020d\u0217\u021f")
        buf.write("\u0227\u022c\u0238\u023e\u0245\u024a\u0252\u0256\u0258")
        buf.write("\u0263\u026b\u026e\u0272\u0277\u027b\u0280\u028a\u0293")
        buf.write("\u0295\u029c\u02a1\u02aa\u02af\u02b2\u02b7\u02c0\u02d0")
        buf.write("\u02da\u02dd\u02e6\u02f0\u02f8\u02fb\u02fe\u030b\u0313")
        buf.write("\u0318\u0320\u0324\u0328\u032c\u032e\u0332\u0338\u0343")
        buf.write("\u034b\u0353\u035f\u037c\u037f\u0382\u038a\u038e\u0392")
        buf.write("\u039b\u03a0\u03ad\u03b2\u03b7\u03bc\u03c1\u03c8\u03d5")
        buf.write("\u03de\u03e7\u03ed\u03f7\u03fb\u03ff\u0401\u0405\u040a")
        buf.write("\u041d\u0429\u042f\u043e\u044e\u0474\u047c\u049a\u04a2")
        buf.write("\u04a4\u04ba\u04bd\u04c8\u04ca\u04ce\u04d3\u04d7\u04dd")
        buf.write("\u04e1\u04eb\u04f7\u04fe\u0501\u0507\u050c\u0511\u0516")
        buf.write("\u051a\u051f\u0525\u052a\u052e\u0533\u0537\u0543\u0548")
        buf.write("\u054e\u0550\u0556\u055a")
        return buf.getvalue()


class apexParser ( Parser ):

    grammarFileName = "apex.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'<>'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "'='", 
                     "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", 
                     "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
                     "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", 
                     "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
                     "'<<='", "'>>='", "'>>>='", "'=>'", "<INVALID>", "'@'", 
                     "'...'", "<INVALID>", "<INVALID>", "'/**'", "<INVALID>", 
                     "'/*'", "<INVALID>", "'''" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "SoqlLiteral", "OVERRIDE", 
                      "VIRTUAL", "SET", "GET", "ABSTRACT", "BREAK", "BYTE", 
                      "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", 
                      "DO", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", 
                      "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", 
                      "INSTANCEOF", "INT", "INTERFACE", "NATIVE", "NEW", 
                      "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", 
                      "SHORT", "STATIC", "SUPER", "SYNCHRONIZED", "THIS", 
                      "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                      "WHILE", "GLOBAL", "WEBSERVICE", "APEX_WITH_SHARING", 
                      "APEX_WITHOUT_SHARING", "SELECT", "DB_INSERT", "DB_UPSERT", 
                      "DB_UPDATE", "DB_DELETE", "DB_UNDELETE", "TESTMETHOD", 
                      "RUNAS", "IntegerLiteral", "FloatingPointLiteral", 
                      "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
                      "NullLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                      "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", 
                      "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
                      "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", 
                      "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", 
                      "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                      "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "LAMBDA_LIKE", "Identifier", "AT", "ELLIPSIS", "WS", 
                      "APEXDOC_COMMENT", "APEXDOC_COMMENT_START", "COMMENT", 
                      "COMMENT_START", "LINE_COMMENT", "QUOTE" ]

    RULE_compilationUnit = 0
    RULE_packageDeclaration = 1
    RULE_importDeclaration = 2
    RULE_typeDeclaration = 3
    RULE_modifier = 4
    RULE_classOrInterfaceModifier = 5
    RULE_variableModifier = 6
    RULE_classDeclaration = 7
    RULE_typeParameters = 8
    RULE_typeParameter = 9
    RULE_typeBound = 10
    RULE_enumDeclaration = 11
    RULE_enumConstants = 12
    RULE_enumConstant = 13
    RULE_enumBodyDeclarations = 14
    RULE_interfaceDeclaration = 15
    RULE_typeList = 16
    RULE_classBody = 17
    RULE_interfaceBody = 18
    RULE_classBodyDeclaration = 19
    RULE_memberDeclaration = 20
    RULE_methodDeclaration = 21
    RULE_genericMethodDeclaration = 22
    RULE_constructorDeclaration = 23
    RULE_genericConstructorDeclaration = 24
    RULE_fieldDeclaration = 25
    RULE_propertyDeclaration = 26
    RULE_propertyBodyDeclaration = 27
    RULE_interfaceBodyDeclaration = 28
    RULE_interfaceMemberDeclaration = 29
    RULE_constDeclaration = 30
    RULE_constantDeclarator = 31
    RULE_interfaceMethodDeclaration = 32
    RULE_genericInterfaceMethodDeclaration = 33
    RULE_variableDeclarators = 34
    RULE_variableDeclarator = 35
    RULE_variableDeclaratorId = 36
    RULE_variableInitializer = 37
    RULE_arrayInitializer = 38
    RULE_enumConstantName = 39
    RULE_typeType = 40
    RULE_classOrInterfaceType = 41
    RULE_primitiveType = 42
    RULE_typeArguments = 43
    RULE_typeArgument = 44
    RULE_qualifiedNameList = 45
    RULE_formalParameters = 46
    RULE_formalParameterList = 47
    RULE_formalParameter = 48
    RULE_lastFormalParameter = 49
    RULE_methodBody = 50
    RULE_constructorBody = 51
    RULE_qualifiedName = 52
    RULE_literal = 53
    RULE_annotation = 54
    RULE_annotationName = 55
    RULE_elementValuePairs = 56
    RULE_elementValuePair = 57
    RULE_elementValue = 58
    RULE_elementValueArrayInitializer = 59
    RULE_annotationTypeDeclaration = 60
    RULE_annotationTypeBody = 61
    RULE_annotationTypeElementDeclaration = 62
    RULE_annotationTypeElementRest = 63
    RULE_annotationMethodOrConstantRest = 64
    RULE_annotationMethodRest = 65
    RULE_annotationConstantRest = 66
    RULE_defaultValue = 67
    RULE_block = 68
    RULE_blockStatement = 69
    RULE_localVariableDeclarationStatement = 70
    RULE_localVariableDeclaration = 71
    RULE_statement = 72
    RULE_propertyBlock = 73
    RULE_getter = 74
    RULE_setter = 75
    RULE_catchClause = 76
    RULE_catchType = 77
    RULE_finallyBlock = 78
    RULE_resourceSpecification = 79
    RULE_resources = 80
    RULE_resource = 81
    RULE_forControl = 82
    RULE_forInit = 83
    RULE_enhancedForControl = 84
    RULE_forUpdate = 85
    RULE_parExpression = 86
    RULE_expressionList = 87
    RULE_statementExpression = 88
    RULE_constantExpression = 89
    RULE_apexDbUpsertExpression = 90
    RULE_apexDbExpression = 91
    RULE_expression = 92
    RULE_primary = 93
    RULE_creator = 94
    RULE_createdName = 95
    RULE_innerCreator = 96
    RULE_arrayCreatorRest = 97
    RULE_mapCreatorRest = 98
    RULE_setCreatorRest = 99
    RULE_classCreatorRest = 100
    RULE_explicitGenericInvocation = 101
    RULE_nonWildcardTypeArguments = 102
    RULE_typeArgumentsOrDiamond = 103
    RULE_nonWildcardTypeArgumentsOrDiamond = 104
    RULE_superSuffix = 105
    RULE_explicitGenericInvocationSuffix = 106
    RULE_arguments = 107

    ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                   "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "typeParameters", 
                   "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
                   "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
                   "typeList", "classBody", "interfaceBody", "classBodyDeclaration", 
                   "memberDeclaration", "methodDeclaration", "genericMethodDeclaration", 
                   "constructorDeclaration", "genericConstructorDeclaration", 
                   "fieldDeclaration", "propertyDeclaration", "propertyBodyDeclaration", 
                   "interfaceBodyDeclaration", "interfaceMemberDeclaration", 
                   "constDeclaration", "constantDeclarator", "interfaceMethodDeclaration", 
                   "genericInterfaceMethodDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "enumConstantName", "typeType", "classOrInterfaceType", 
                   "primitiveType", "typeArguments", "typeArgument", "qualifiedNameList", 
                   "formalParameters", "formalParameterList", "formalParameter", 
                   "lastFormalParameter", "methodBody", "constructorBody", 
                   "qualifiedName", "literal", "annotation", "annotationName", 
                   "elementValuePairs", "elementValuePair", "elementValue", 
                   "elementValueArrayInitializer", "annotationTypeDeclaration", 
                   "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "block", "blockStatement", "localVariableDeclarationStatement", 
                   "localVariableDeclaration", "statement", "propertyBlock", 
                   "getter", "setter", "catchClause", "catchType", "finallyBlock", 
                   "resourceSpecification", "resources", "resource", "forControl", 
                   "forInit", "enhancedForControl", "forUpdate", "parExpression", 
                   "expressionList", "statementExpression", "constantExpression", 
                   "apexDbUpsertExpression", "apexDbExpression", "expression", 
                   "primary", "creator", "createdName", "innerCreator", 
                   "arrayCreatorRest", "mapCreatorRest", "setCreatorRest", 
                   "classCreatorRest", "explicitGenericInvocation", "nonWildcardTypeArguments", 
                   "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments" ]

    EOF = Token.EOF
    T__0=1
    SoqlLiteral=2
    OVERRIDE=3
    VIRTUAL=4
    SET=5
    GET=6
    ABSTRACT=7
    BREAK=8
    BYTE=9
    CATCH=10
    CHAR=11
    CLASS=12
    CONST=13
    CONTINUE=14
    DEFAULT=15
    DO=16
    ELSE=17
    ENUM=18
    EXTENDS=19
    FINAL=20
    FINALLY=21
    FLOAT=22
    FOR=23
    IF=24
    GOTO=25
    IMPLEMENTS=26
    IMPORT=27
    INSTANCEOF=28
    INT=29
    INTERFACE=30
    NATIVE=31
    NEW=32
    PACKAGE=33
    PRIVATE=34
    PROTECTED=35
    PUBLIC=36
    RETURN=37
    SHORT=38
    STATIC=39
    SUPER=40
    SYNCHRONIZED=41
    THIS=42
    THROW=43
    THROWS=44
    TRANSIENT=45
    TRY=46
    VOID=47
    VOLATILE=48
    WHILE=49
    GLOBAL=50
    WEBSERVICE=51
    APEX_WITH_SHARING=52
    APEX_WITHOUT_SHARING=53
    SELECT=54
    DB_INSERT=55
    DB_UPSERT=56
    DB_UPDATE=57
    DB_DELETE=58
    DB_UNDELETE=59
    TESTMETHOD=60
    RUNAS=61
    IntegerLiteral=62
    FloatingPointLiteral=63
    BooleanLiteral=64
    CharacterLiteral=65
    StringLiteral=66
    NullLiteral=67
    LPAREN=68
    RPAREN=69
    LBRACE=70
    RBRACE=71
    LBRACK=72
    RBRACK=73
    SEMI=74
    COMMA=75
    DOT=76
    ASSIGN=77
    GT=78
    LT=79
    BANG=80
    TILDE=81
    QUESTION=82
    COLON=83
    EQUAL=84
    LE=85
    GE=86
    NOTEQUAL=87
    AND=88
    OR=89
    INC=90
    DEC=91
    ADD=92
    SUB=93
    MUL=94
    DIV=95
    BITAND=96
    BITOR=97
    CARET=98
    MOD=99
    ADD_ASSIGN=100
    SUB_ASSIGN=101
    MUL_ASSIGN=102
    DIV_ASSIGN=103
    AND_ASSIGN=104
    OR_ASSIGN=105
    XOR_ASSIGN=106
    MOD_ASSIGN=107
    LSHIFT_ASSIGN=108
    RSHIFT_ASSIGN=109
    URSHIFT_ASSIGN=110
    LAMBDA_LIKE=111
    Identifier=112
    AT=113
    ELLIPSIS=114
    WS=115
    APEXDOC_COMMENT=116
    APEXDOC_COMMENT_START=117
    COMMENT=118
    COMMENT_START=119
    LINE_COMMENT=120
    QUOTE=121

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class CompilationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(apexParser.EOF, 0)

        def packageDeclaration(self):
            return self.getTypedRuleContext(apexParser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(apexParser.ImportDeclarationContext,i)


        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(apexParser.TypeDeclarationContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = apexParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 216
                self.packageDeclaration()


            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.IMPORT:
                self.state = 219
                self.importDeclaration()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.CLASS) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.INTERFACE) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.STATIC) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.TESTMETHOD))) != 0) or _la==apexParser.SEMI or _la==apexParser.AT:
                self.state = 225
                self.typeDeclaration()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 231
            self.match(apexParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PackageDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(apexParser.PACKAGE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(apexParser.QualifiedNameContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(apexParser.AnnotationContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)




    def packageDeclaration(self):

        localctx = apexParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.AT:
                self.state = 233
                self.annotation()
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 239
            self.match(apexParser.PACKAGE)
            self.state = 240
            self.qualifiedName()
            self.state = 241
            self.match(apexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(apexParser.IMPORT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(apexParser.QualifiedNameContext,0)


        def STATIC(self):
            return self.getToken(apexParser.STATIC, 0)

        def getRuleIndex(self):
            return apexParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = apexParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(apexParser.IMPORT)
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.STATIC:
                self.state = 244
                self.match(apexParser.STATIC)


            self.state = 247
            self.qualifiedName()
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.DOT:
                self.state = 248
                self.match(apexParser.DOT)
                self.state = 249
                self.match(apexParser.MUL)


            self.state = 252
            self.match(apexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(apexParser.ClassDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(apexParser.ClassOrInterfaceModifierContext,i)


        def enumDeclaration(self):
            return self.getTypedRuleContext(apexParser.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(apexParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(apexParser.AnnotationTypeDeclarationContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)




    def typeDeclaration(self):

        localctx = apexParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.STATIC) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.TESTMETHOD))) != 0) or _la==apexParser.AT:
                    self.state = 254
                    self.classOrInterfaceModifier()
                    self.state = 259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 260
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.STATIC) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.TESTMETHOD))) != 0) or _la==apexParser.AT:
                    self.state = 261
                    self.classOrInterfaceModifier()
                    self.state = 266
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 267
                self.enumDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.STATIC) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.TESTMETHOD))) != 0) or _la==apexParser.AT:
                    self.state = 268
                    self.classOrInterfaceModifier()
                    self.state = 273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 274
                self.interfaceDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 275
                        self.classOrInterfaceModifier() 
                    self.state = 280
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 281
                self.annotationTypeDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 282
                self.match(apexParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            return self.getTypedRuleContext(apexParser.ClassOrInterfaceModifierContext,0)


        def NATIVE(self):
            return self.getToken(apexParser.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(apexParser.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(apexParser.TRANSIENT, 0)

        def getRuleIndex(self):
            return apexParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = apexParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_modifier)
        self._la = 0 # Token type
        try:
            self.state = 287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.OVERRIDE, apexParser.VIRTUAL, apexParser.ABSTRACT, apexParser.FINAL, apexParser.PRIVATE, apexParser.PROTECTED, apexParser.PUBLIC, apexParser.STATIC, apexParser.GLOBAL, apexParser.WEBSERVICE, apexParser.APEX_WITH_SHARING, apexParser.APEX_WITHOUT_SHARING, apexParser.TESTMETHOD, apexParser.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 285
                self.classOrInterfaceModifier()
                pass
            elif token in [apexParser.NATIVE, apexParser.SYNCHRONIZED, apexParser.TRANSIENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 286
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.NATIVE) | (1 << apexParser.SYNCHRONIZED) | (1 << apexParser.TRANSIENT))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrInterfaceModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(apexParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(apexParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(apexParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(apexParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(apexParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(apexParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(apexParser.FINAL, 0)

        def GLOBAL(self):
            return self.getToken(apexParser.GLOBAL, 0)

        def WEBSERVICE(self):
            return self.getToken(apexParser.WEBSERVICE, 0)

        def OVERRIDE(self):
            return self.getToken(apexParser.OVERRIDE, 0)

        def VIRTUAL(self):
            return self.getToken(apexParser.VIRTUAL, 0)

        def TESTMETHOD(self):
            return self.getToken(apexParser.TESTMETHOD, 0)

        def APEX_WITH_SHARING(self):
            return self.getToken(apexParser.APEX_WITH_SHARING, 0)

        def APEX_WITHOUT_SHARING(self):
            return self.getToken(apexParser.APEX_WITHOUT_SHARING, 0)

        def getRuleIndex(self):
            return apexParser.RULE_classOrInterfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceModifier" ):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceModifier" ):
                listener.exitClassOrInterfaceModifier(self)




    def classOrInterfaceModifier(self):

        localctx = apexParser.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_classOrInterfaceModifier)
        self._la = 0 # Token type
        try:
            self.state = 291
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 289
                self.annotation()
                pass
            elif token in [apexParser.OVERRIDE, apexParser.VIRTUAL, apexParser.ABSTRACT, apexParser.FINAL, apexParser.PRIVATE, apexParser.PROTECTED, apexParser.PUBLIC, apexParser.STATIC, apexParser.GLOBAL, apexParser.WEBSERVICE, apexParser.APEX_WITH_SHARING, apexParser.APEX_WITHOUT_SHARING, apexParser.TESTMETHOD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 290
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.STATIC) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.TESTMETHOD))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(apexParser.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(apexParser.AnnotationContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)




    def variableModifier(self):

        localctx = apexParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_variableModifier)
        try:
            self.state = 295
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.FINAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 293
                self.match(apexParser.FINAL)
                pass
            elif token in [apexParser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 294
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(apexParser.CLASS, 0)

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def classBody(self):
            return self.getTypedRuleContext(apexParser.ClassBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(apexParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(apexParser.EXTENDS, 0)

        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def IMPLEMENTS(self):
            return self.getToken(apexParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(apexParser.TypeListContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = apexParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(apexParser.CLASS)
            self.state = 298
            self.match(apexParser.Identifier)
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.LT:
                self.state = 299
                self.typeParameters()


            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.EXTENDS:
                self.state = 302
                self.match(apexParser.EXTENDS)
                self.state = 303
                self.typeType()


            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.IMPLEMENTS:
                self.state = 306
                self.match(apexParser.IMPLEMENTS)
                self.state = 307
                self.typeList()


            self.state = 310
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(apexParser.TypeParameterContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = apexParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(apexParser.LT)
            self.state = 313
            self.typeParameter()
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.COMMA:
                self.state = 314
                self.match(apexParser.COMMA)
                self.state = 315
                self.typeParameter()
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 321
            self.match(apexParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def EXTENDS(self):
            return self.getToken(apexParser.EXTENDS, 0)

        def typeBound(self):
            return self.getTypedRuleContext(apexParser.TypeBoundContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = apexParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(apexParser.Identifier)
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.EXTENDS:
                self.state = 324
                self.match(apexParser.EXTENDS)
                self.state = 325
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeBoundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(apexParser.TypeTypeContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)




    def typeBound(self):

        localctx = apexParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.typeType()
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.BITAND:
                self.state = 329
                self.match(apexParser.BITAND)
                self.state = 330
                self.typeType()
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(apexParser.ENUM, 0)

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def IMPLEMENTS(self):
            return self.getToken(apexParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(apexParser.TypeListContext,0)


        def enumConstants(self):
            return self.getTypedRuleContext(apexParser.EnumConstantsContext,0)


        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(apexParser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = apexParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(apexParser.ENUM)
            self.state = 337
            self.match(apexParser.Identifier)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.IMPLEMENTS:
                self.state = 338
                self.match(apexParser.IMPLEMENTS)
                self.state = 339
                self.typeList()


            self.state = 342
            self.match(apexParser.LBRACE)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.Identifier or _la==apexParser.AT:
                self.state = 343
                self.enumConstants()


            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.COMMA:
                self.state = 346
                self.match(apexParser.COMMA)


            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.SEMI:
                self.state = 349
                self.enumBodyDeclarations()


            self.state = 352
            self.match(apexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(apexParser.EnumConstantContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)




    def enumConstants(self):

        localctx = apexParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.enumConstant()
            self.state = 359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 355
                    self.match(apexParser.COMMA)
                    self.state = 356
                    self.enumConstant() 
                self.state = 361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(apexParser.AnnotationContext,i)


        def arguments(self):
            return self.getTypedRuleContext(apexParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(apexParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)




    def enumConstant(self):

        localctx = apexParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.AT:
                self.state = 362
                self.annotation()
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 368
            self.match(apexParser.Identifier)
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.LPAREN:
                self.state = 369
                self.arguments()


            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.LBRACE:
                self.state = 372
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumBodyDeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(apexParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)




    def enumBodyDeclarations(self):

        localctx = apexParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(apexParser.SEMI)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE) | (1 << apexParser.NATIVE) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.SHORT) | (1 << apexParser.STATIC) | (1 << apexParser.SYNCHRONIZED) | (1 << apexParser.TRANSIENT) | (1 << apexParser.VOID) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.TESTMETHOD))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (apexParser.LBRACE - 70)) | (1 << (apexParser.SEMI - 70)) | (1 << (apexParser.LT - 70)) | (1 << (apexParser.Identifier - 70)) | (1 << (apexParser.AT - 70)))) != 0):
                self.state = 376
                self.classBodyDeclaration()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(apexParser.INTERFACE, 0)

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def interfaceBody(self):
            return self.getTypedRuleContext(apexParser.InterfaceBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(apexParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(apexParser.EXTENDS, 0)

        def typeList(self):
            return self.getTypedRuleContext(apexParser.TypeListContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = apexParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(apexParser.INTERFACE)
            self.state = 383
            self.match(apexParser.Identifier)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.LT:
                self.state = 384
                self.typeParameters()


            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.EXTENDS:
                self.state = 387
                self.match(apexParser.EXTENDS)
                self.state = 388
                self.typeList()


            self.state = 391
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(apexParser.TypeTypeContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)




    def typeList(self):

        localctx = apexParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.typeType()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.COMMA:
                self.state = 394
                self.match(apexParser.COMMA)
                self.state = 395
                self.typeType()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(apexParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = apexParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(apexParser.LBRACE)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE) | (1 << apexParser.NATIVE) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.SHORT) | (1 << apexParser.STATIC) | (1 << apexParser.SYNCHRONIZED) | (1 << apexParser.TRANSIENT) | (1 << apexParser.VOID) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.TESTMETHOD))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (apexParser.LBRACE - 70)) | (1 << (apexParser.SEMI - 70)) | (1 << (apexParser.LT - 70)) | (1 << (apexParser.Identifier - 70)) | (1 << (apexParser.AT - 70)))) != 0):
                self.state = 402
                self.classBodyDeclaration()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 408
            self.match(apexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(apexParser.InterfaceBodyDeclarationContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)




    def interfaceBody(self):

        localctx = apexParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(apexParser.LBRACE)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE) | (1 << apexParser.NATIVE) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.SHORT) | (1 << apexParser.STATIC) | (1 << apexParser.SYNCHRONIZED) | (1 << apexParser.TRANSIENT) | (1 << apexParser.VOID) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.TESTMETHOD))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (apexParser.SEMI - 74)) | (1 << (apexParser.LT - 74)) | (1 << (apexParser.Identifier - 74)) | (1 << (apexParser.AT - 74)))) != 0):
                self.state = 411
                self.interfaceBodyDeclaration()
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 417
            self.match(apexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(apexParser.BlockContext,0)


        def STATIC(self):
            return self.getToken(apexParser.STATIC, 0)

        def memberDeclaration(self):
            return self.getTypedRuleContext(apexParser.MemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ModifierContext)
            else:
                return self.getTypedRuleContext(apexParser.ModifierContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)




    def classBodyDeclaration(self):

        localctx = apexParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_classBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.match(apexParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==apexParser.STATIC:
                    self.state = 420
                    self.match(apexParser.STATIC)


                self.state = 423
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 424
                        self.modifier() 
                    self.state = 429
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                self.state = 430
                self.memberDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDeclaration(self):
            return self.getTypedRuleContext(apexParser.MethodDeclarationContext,0)


        def genericMethodDeclaration(self):
            return self.getTypedRuleContext(apexParser.GenericMethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(apexParser.FieldDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(apexParser.ConstructorDeclarationContext,0)


        def genericConstructorDeclaration(self):
            return self.getTypedRuleContext(apexParser.GenericConstructorDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(apexParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(apexParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(apexParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(apexParser.EnumDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(apexParser.PropertyDeclarationContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)




    def memberDeclaration(self):

        localctx = apexParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_memberDeclaration)
        try:
            self.state = 443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 433
                self.methodDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 434
                self.genericMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 435
                self.fieldDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 436
                self.constructorDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 437
                self.genericConstructorDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 438
                self.interfaceDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 439
                self.annotationTypeDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 440
                self.classDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 441
                self.enumDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 442
                self.propertyDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(apexParser.FormalParametersContext,0)


        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(apexParser.VOID, 0)

        def methodBody(self):
            return self.getTypedRuleContext(apexParser.MethodBodyContext,0)


        def OVERRIDE(self):
            return self.getToken(apexParser.OVERRIDE, 0)

        def THROWS(self):
            return self.getToken(apexParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(apexParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = apexParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.OVERRIDE:
                self.state = 445
                self.match(apexParser.OVERRIDE)


            self.state = 450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.SET, apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.SHORT, apexParser.Identifier]:
                self.state = 448
                self.typeType()
                pass
            elif token in [apexParser.VOID]:
                self.state = 449
                self.match(apexParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 452
            self.match(apexParser.Identifier)
            self.state = 453
            self.formalParameters()
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.LBRACK:
                self.state = 454
                self.match(apexParser.LBRACK)
                self.state = 455
                self.match(apexParser.RBRACK)
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.THROWS:
                self.state = 461
                self.match(apexParser.THROWS)
                self.state = 462
                self.qualifiedNameList()


            self.state = 467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.LBRACE]:
                self.state = 465
                self.methodBody()
                pass
            elif token in [apexParser.SEMI]:
                self.state = 466
                self.match(apexParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericMethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(apexParser.TypeParametersContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(apexParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_genericMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMethodDeclaration" ):
                listener.enterGenericMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMethodDeclaration" ):
                listener.exitGenericMethodDeclaration(self)




    def genericMethodDeclaration(self):

        localctx = apexParser.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.typeParameters()
            self.state = 470
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(apexParser.FormalParametersContext,0)


        def constructorBody(self):
            return self.getTypedRuleContext(apexParser.ConstructorBodyContext,0)


        def THROWS(self):
            return self.getToken(apexParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(apexParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)




    def constructorDeclaration(self):

        localctx = apexParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(apexParser.Identifier)
            self.state = 473
            self.formalParameters()
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.THROWS:
                self.state = 474
                self.match(apexParser.THROWS)
                self.state = 475
                self.qualifiedNameList()


            self.state = 478
            self.constructorBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericConstructorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(apexParser.TypeParametersContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(apexParser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_genericConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericConstructorDeclaration" ):
                listener.enterGenericConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericConstructorDeclaration" ):
                listener.exitGenericConstructorDeclaration(self)




    def genericConstructorDeclaration(self):

        localctx = apexParser.GenericConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_genericConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.typeParameters()
            self.state = 481
            self.constructorDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(apexParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = apexParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.typeType()
            self.state = 484
            self.variableDeclarators()
            self.state = 485
            self.match(apexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(apexParser.VariableDeclaratorsContext,0)


        def propertyBodyDeclaration(self):
            return self.getTypedRuleContext(apexParser.PropertyBodyDeclarationContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)




    def propertyDeclaration(self):

        localctx = apexParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_propertyDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.typeType()
            self.state = 488
            self.variableDeclarators()
            self.state = 489
            self.propertyBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyBodyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.PropertyBlockContext)
            else:
                return self.getTypedRuleContext(apexParser.PropertyBlockContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_propertyBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyBodyDeclaration" ):
                listener.enterPropertyBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyBodyDeclaration" ):
                listener.exitPropertyBodyDeclaration(self)




    def propertyBodyDeclaration(self):

        localctx = apexParser.PropertyBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_propertyBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(apexParser.LBRACE)
            self.state = 492
            self.propertyBlock()
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.GET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL) | (1 << apexParser.NATIVE) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.STATIC) | (1 << apexParser.SYNCHRONIZED) | (1 << apexParser.TRANSIENT) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.TESTMETHOD))) != 0) or _la==apexParser.AT:
                self.state = 493
                self.propertyBlock()


            self.state = 496
            self.match(apexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceBodyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self):
            return self.getTypedRuleContext(apexParser.InterfaceMemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ModifierContext)
            else:
                return self.getTypedRuleContext(apexParser.ModifierContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_interfaceBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBodyDeclaration" ):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBodyDeclaration" ):
                listener.exitInterfaceBodyDeclaration(self)




    def interfaceBodyDeclaration(self):

        localctx = apexParser.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.OVERRIDE, apexParser.VIRTUAL, apexParser.SET, apexParser.ABSTRACT, apexParser.BYTE, apexParser.CHAR, apexParser.CLASS, apexParser.ENUM, apexParser.FINAL, apexParser.FLOAT, apexParser.INT, apexParser.INTERFACE, apexParser.NATIVE, apexParser.PRIVATE, apexParser.PROTECTED, apexParser.PUBLIC, apexParser.SHORT, apexParser.STATIC, apexParser.SYNCHRONIZED, apexParser.TRANSIENT, apexParser.VOID, apexParser.GLOBAL, apexParser.WEBSERVICE, apexParser.APEX_WITH_SHARING, apexParser.APEX_WITHOUT_SHARING, apexParser.TESTMETHOD, apexParser.LT, apexParser.Identifier, apexParser.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 498
                        self.modifier() 
                    self.state = 503
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                self.state = 504
                self.interfaceMemberDeclaration()
                pass
            elif token in [apexParser.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.match(apexParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMemberDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDeclaration(self):
            return self.getTypedRuleContext(apexParser.ConstDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(apexParser.InterfaceMethodDeclarationContext,0)


        def genericInterfaceMethodDeclaration(self):
            return self.getTypedRuleContext(apexParser.GenericInterfaceMethodDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(apexParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(apexParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(apexParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(apexParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)




    def interfaceMemberDeclaration(self):

        localctx = apexParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.constDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 510
                self.genericInterfaceMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 511
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 512
                self.annotationTypeDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 513
                self.classDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 514
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def constantDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(apexParser.ConstantDeclaratorContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)




    def constDeclaration(self):

        localctx = apexParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_constDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.typeType()
            self.state = 518
            self.constantDeclarator()
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.COMMA:
                self.state = 519
                self.match(apexParser.COMMA)
                self.state = 520
                self.constantDeclarator()
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 526
            self.match(apexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(apexParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_constantDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclarator" ):
                listener.enterConstantDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclarator" ):
                listener.exitConstantDeclarator(self)




    def constantDeclarator(self):

        localctx = apexParser.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_constantDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(apexParser.Identifier)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.LBRACK:
                self.state = 529
                self.match(apexParser.LBRACK)
                self.state = 530
                self.match(apexParser.RBRACK)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 536
            self.match(apexParser.ASSIGN)
            self.state = 537
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(apexParser.FormalParametersContext,0)


        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(apexParser.VOID, 0)

        def THROWS(self):
            return self.getToken(apexParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(apexParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)




    def interfaceMethodDeclaration(self):

        localctx = apexParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_interfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.SET, apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.SHORT, apexParser.Identifier]:
                self.state = 539
                self.typeType()
                pass
            elif token in [apexParser.VOID]:
                self.state = 540
                self.match(apexParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 543
            self.match(apexParser.Identifier)
            self.state = 544
            self.formalParameters()
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.LBRACK:
                self.state = 545
                self.match(apexParser.LBRACK)
                self.state = 546
                self.match(apexParser.RBRACK)
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.THROWS:
                self.state = 552
                self.match(apexParser.THROWS)
                self.state = 553
                self.qualifiedNameList()


            self.state = 556
            self.match(apexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericInterfaceMethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(apexParser.TypeParametersContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(apexParser.InterfaceMethodDeclarationContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_genericInterfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericInterfaceMethodDeclaration" ):
                listener.enterGenericInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericInterfaceMethodDeclaration" ):
                listener.exitGenericInterfaceMethodDeclaration(self)




    def genericInterfaceMethodDeclaration(self):

        localctx = apexParser.GenericInterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_genericInterfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.typeParameters()
            self.state = 559
            self.interfaceMethodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(apexParser.VariableDeclaratorContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)




    def variableDeclarators(self):

        localctx = apexParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.variableDeclarator()
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.COMMA:
                self.state = 562
                self.match(apexParser.COMMA)
                self.state = 563
                self.variableDeclarator()
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(apexParser.VariableDeclaratorIdContext,0)


        def variableInitializer(self):
            return self.getTypedRuleContext(apexParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)




    def variableDeclarator(self):

        localctx = apexParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.variableDeclaratorId()
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.ASSIGN:
                self.state = 570
                self.match(apexParser.ASSIGN)
                self.state = 571
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def getRuleIndex(self):
            return apexParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)




    def variableDeclaratorId(self):

        localctx = apexParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(apexParser.Identifier)
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.LBRACK:
                self.state = 575
                self.match(apexParser.LBRACK)
                self.state = 576
                self.match(apexParser.RBRACK)
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(apexParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(apexParser.ExpressionContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = apexParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableInitializer)
        try:
            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.arrayInitializer()
                pass
            elif token in [apexParser.SoqlLiteral, apexParser.SET, apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.NEW, apexParser.SHORT, apexParser.SUPER, apexParser.THIS, apexParser.VOID, apexParser.IntegerLiteral, apexParser.FloatingPointLiteral, apexParser.BooleanLiteral, apexParser.CharacterLiteral, apexParser.StringLiteral, apexParser.NullLiteral, apexParser.LPAREN, apexParser.LT, apexParser.BANG, apexParser.TILDE, apexParser.INC, apexParser.DEC, apexParser.ADD, apexParser.SUB, apexParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(apexParser.VariableInitializerContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = apexParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(apexParser.LBRACE)
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.NEW) | (1 << apexParser.SHORT) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.VOID) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LBRACE - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)))) != 0):
                self.state = 587
                self.variableInitializer()
                self.state = 592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 588
                        self.match(apexParser.COMMA)
                        self.state = 589
                        self.variableInitializer() 
                    self.state = 594
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==apexParser.COMMA:
                    self.state = 595
                    self.match(apexParser.COMMA)




            self.state = 600
            self.match(apexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def getRuleIndex(self):
            return apexParser.RULE_enumConstantName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstantName" ):
                listener.enterEnumConstantName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstantName" ):
                listener.exitEnumConstantName(self)




    def enumConstantName(self):

        localctx = apexParser.EnumConstantNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_enumConstantName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(apexParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(apexParser.ClassOrInterfaceTypeContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(apexParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_typeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeType" ):
                listener.enterTypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeType" ):
                listener.exitTypeType(self)




    def typeType(self):

        localctx = apexParser.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_typeType)
        try:
            self.state = 620
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.SET, apexParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 604
                self.classOrInterfaceType()
                self.state = 609
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 605
                        self.match(apexParser.LBRACK)
                        self.state = 606
                        self.match(apexParser.RBRACK) 
                    self.state = 611
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                pass
            elif token in [apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.SHORT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.primitiveType()
                self.state = 617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 613
                        self.match(apexParser.LBRACK)
                        self.state = 614
                        self.match(apexParser.RBRACK) 
                    self.state = 619
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrInterfaceTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(apexParser.Identifier)
            else:
                return self.getToken(apexParser.Identifier, i)

        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(apexParser.TypeArgumentsContext,i)


        def SET(self):
            return self.getToken(apexParser.SET, 0)

        def getRuleIndex(self):
            return apexParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)




    def classOrInterfaceType(self):

        localctx = apexParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_classOrInterfaceType)
        try:
            self.state = 638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.match(apexParser.Identifier)
                self.state = 624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 623
                    self.typeArguments()


                self.state = 633
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 626
                        self.match(apexParser.DOT)
                        self.state = 627
                        self.match(apexParser.Identifier)
                        self.state = 629
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                        if la_ == 1:
                            self.state = 628
                            self.typeArguments()

                 
                    self.state = 635
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                pass
            elif token in [apexParser.SET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 636
                self.match(apexParser.SET)
                self.state = 637
                self.typeArguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR(self):
            return self.getToken(apexParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(apexParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(apexParser.SHORT, 0)

        def INT(self):
            return self.getToken(apexParser.INT, 0)

        def FLOAT(self):
            return self.getToken(apexParser.FLOAT, 0)

        def getRuleIndex(self):
            return apexParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = apexParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.SHORT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(apexParser.TypeArgumentContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = apexParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(apexParser.LT)
            self.state = 643
            self.typeArgument()
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.COMMA:
                self.state = 644
                self.match(apexParser.COMMA)
                self.state = 645
                self.typeArgument()
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 651
            self.match(apexParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def EXTENDS(self):
            return self.getToken(apexParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(apexParser.SUPER, 0)

        def getRuleIndex(self):
            return apexParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)




    def typeArgument(self):

        localctx = apexParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.SET, apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.SHORT, apexParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 653
                self.typeType()
                pass
            elif token in [apexParser.QUESTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self.match(apexParser.QUESTION)
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==apexParser.EXTENDS or _la==apexParser.SUPER:
                    self.state = 655
                    _la = self._input.LA(1)
                    if not(_la==apexParser.EXTENDS or _la==apexParser.SUPER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 656
                    self.typeType()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(apexParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)




    def qualifiedNameList(self):

        localctx = apexParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.qualifiedName()
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.COMMA:
                self.state = 662
                self.match(apexParser.COMMA)
                self.state = 663
                self.qualifiedName()
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameterList(self):
            return self.getTypedRuleContext(apexParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)




    def formalParameters(self):

        localctx = apexParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(apexParser.LPAREN)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.SHORT))) != 0) or _la==apexParser.Identifier or _la==apexParser.AT:
                self.state = 670
                self.formalParameterList()


            self.state = 673
            self.match(apexParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(apexParser.FormalParameterContext,i)


        def lastFormalParameter(self):
            return self.getTypedRuleContext(apexParser.LastFormalParameterContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = apexParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self.formalParameter()
                self.state = 680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 676
                        self.match(apexParser.COMMA)
                        self.state = 677
                        self.formalParameter() 
                    self.state = 682
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==apexParser.COMMA:
                    self.state = 683
                    self.match(apexParser.COMMA)
                    self.state = 684
                    self.lastFormalParameter()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 687
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(apexParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(apexParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = apexParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_formalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.FINAL or _la==apexParser.AT:
                self.state = 690
                self.variableModifier()
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 696
            self.typeType()
            self.state = 697
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LastFormalParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(apexParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(apexParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)




    def lastFormalParameter(self):

        localctx = apexParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_lastFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.FINAL or _la==apexParser.AT:
                self.state = 699
                self.variableModifier()
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 705
            self.typeType()
            self.state = 706
            self.match(apexParser.ELLIPSIS)
            self.state = 707
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(apexParser.BlockContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = apexParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_methodBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(apexParser.BlockContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_constructorBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorBody" ):
                listener.enterConstructorBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorBody" ):
                listener.exitConstructorBody(self)




    def constructorBody(self):

        localctx = apexParser.ConstructorBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_constructorBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(apexParser.Identifier)
            else:
                return self.getToken(apexParser.Identifier, i)

        def getRuleIndex(self):
            return apexParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = apexParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(apexParser.Identifier)
            self.state = 718
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 714
                    self.match(apexParser.DOT)
                    self.state = 715
                    self.match(apexParser.Identifier) 
                self.state = 720
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(apexParser.IntegerLiteral, 0)

        def FloatingPointLiteral(self):
            return self.getToken(apexParser.FloatingPointLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(apexParser.CharacterLiteral, 0)

        def StringLiteral(self):
            return self.getToken(apexParser.StringLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(apexParser.BooleanLiteral, 0)

        def NullLiteral(self):
            return self.getToken(apexParser.NullLiteral, 0)

        def getRuleIndex(self):
            return apexParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = apexParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            _la = self._input.LA(1)
            if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (apexParser.IntegerLiteral - 62)) | (1 << (apexParser.FloatingPointLiteral - 62)) | (1 << (apexParser.BooleanLiteral - 62)) | (1 << (apexParser.CharacterLiteral - 62)) | (1 << (apexParser.StringLiteral - 62)) | (1 << (apexParser.NullLiteral - 62)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationName(self):
            return self.getTypedRuleContext(apexParser.AnnotationNameContext,0)


        def elementValuePairs(self):
            return self.getTypedRuleContext(apexParser.ElementValuePairsContext,0)


        def elementValue(self):
            return self.getTypedRuleContext(apexParser.ElementValueContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = apexParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(apexParser.AT)
            self.state = 724
            self.annotationName()
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.LPAREN:
                self.state = 725
                self.match(apexParser.LPAREN)
                self.state = 728
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 726
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 727
                    self.elementValue()


                self.state = 730
                self.match(apexParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(apexParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_annotationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationName" ):
                listener.enterAnnotationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationName" ):
                listener.exitAnnotationName(self)




    def annotationName(self):

        localctx = apexParser.AnnotationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_annotationName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValuePairsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(apexParser.ElementValuePairContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)




    def elementValuePairs(self):

        localctx = apexParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.elementValuePair()
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.COMMA:
                self.state = 736
                self.match(apexParser.COMMA)
                self.state = 737
                self.elementValuePair()
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValuePairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def elementValue(self):
            return self.getTypedRuleContext(apexParser.ElementValueContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)




    def elementValuePair(self):

        localctx = apexParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(apexParser.Identifier)
            self.state = 744
            self.match(apexParser.ASSIGN)
            self.state = 745
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(apexParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(apexParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(apexParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)




    def elementValue(self):

        localctx = apexParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_elementValue)
        try:
            self.state = 750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.SoqlLiteral, apexParser.SET, apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.NEW, apexParser.SHORT, apexParser.SUPER, apexParser.THIS, apexParser.VOID, apexParser.IntegerLiteral, apexParser.FloatingPointLiteral, apexParser.BooleanLiteral, apexParser.CharacterLiteral, apexParser.StringLiteral, apexParser.NullLiteral, apexParser.LPAREN, apexParser.LT, apexParser.BANG, apexParser.TILDE, apexParser.INC, apexParser.DEC, apexParser.ADD, apexParser.SUB, apexParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.expression(0)
                pass
            elif token in [apexParser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.annotation()
                pass
            elif token in [apexParser.LBRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 749
                self.elementValueArrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValueArrayInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(apexParser.ElementValueContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)




    def elementValueArrayInitializer(self):

        localctx = apexParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(apexParser.LBRACE)
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.NEW) | (1 << apexParser.SHORT) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.VOID) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LBRACE - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)) | (1 << (apexParser.AT - 64)))) != 0):
                self.state = 753
                self.elementValue()
                self.state = 758
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 754
                        self.match(apexParser.COMMA)
                        self.state = 755
                        self.elementValue() 
                    self.state = 760
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)



            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.COMMA:
                self.state = 763
                self.match(apexParser.COMMA)


            self.state = 766
            self.match(apexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(apexParser.INTERFACE, 0)

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def annotationTypeBody(self):
            return self.getTypedRuleContext(apexParser.AnnotationTypeBodyContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_annotationTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeDeclaration" ):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeDeclaration" ):
                listener.exitAnnotationTypeDeclaration(self)




    def annotationTypeDeclaration(self):

        localctx = apexParser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(apexParser.AT)
            self.state = 769
            self.match(apexParser.INTERFACE)
            self.state = 770
            self.match(apexParser.Identifier)
            self.state = 771
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(apexParser.AnnotationTypeElementDeclarationContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_annotationTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeBody" ):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeBody" ):
                listener.exitAnnotationTypeBody(self)




    def annotationTypeBody(self):

        localctx = apexParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(apexParser.LBRACE)
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE) | (1 << apexParser.NATIVE) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.SHORT) | (1 << apexParser.STATIC) | (1 << apexParser.SYNCHRONIZED) | (1 << apexParser.TRANSIENT) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.TESTMETHOD))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (apexParser.SEMI - 74)) | (1 << (apexParser.Identifier - 74)) | (1 << (apexParser.AT - 74)))) != 0):
                self.state = 774
                self.annotationTypeElementDeclaration()
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 780
            self.match(apexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeElementDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(apexParser.AnnotationTypeElementRestContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ModifierContext)
            else:
                return self.getTypedRuleContext(apexParser.ModifierContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementDeclaration" ):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementDeclaration" ):
                listener.exitAnnotationTypeElementDeclaration(self)




    def annotationTypeElementDeclaration(self):

        localctx = apexParser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_annotationTypeElementDeclaration)
        try:
            self.state = 790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.OVERRIDE, apexParser.VIRTUAL, apexParser.SET, apexParser.ABSTRACT, apexParser.BYTE, apexParser.CHAR, apexParser.CLASS, apexParser.ENUM, apexParser.FINAL, apexParser.FLOAT, apexParser.INT, apexParser.INTERFACE, apexParser.NATIVE, apexParser.PRIVATE, apexParser.PROTECTED, apexParser.PUBLIC, apexParser.SHORT, apexParser.STATIC, apexParser.SYNCHRONIZED, apexParser.TRANSIENT, apexParser.GLOBAL, apexParser.WEBSERVICE, apexParser.APEX_WITH_SHARING, apexParser.APEX_WITHOUT_SHARING, apexParser.TESTMETHOD, apexParser.Identifier, apexParser.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 782
                        self.modifier() 
                    self.state = 787
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                self.state = 788
                self.annotationTypeElementRest()
                pass
            elif token in [apexParser.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.match(apexParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeElementRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def annotationMethodOrConstantRest(self):
            return self.getTypedRuleContext(apexParser.AnnotationMethodOrConstantRestContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(apexParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(apexParser.InterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(apexParser.EnumDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(apexParser.AnnotationTypeDeclarationContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_annotationTypeElementRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest" ):
                listener.enterAnnotationTypeElementRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest" ):
                listener.exitAnnotationTypeElementRest(self)




    def annotationTypeElementRest(self):

        localctx = apexParser.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_annotationTypeElementRest)
        try:
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.SET, apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.SHORT, apexParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.typeType()
                self.state = 793
                self.annotationMethodOrConstantRest()
                self.state = 794
                self.match(apexParser.SEMI)
                pass
            elif token in [apexParser.CLASS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 796
                self.classDeclaration()
                self.state = 798
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 797
                    self.match(apexParser.SEMI)


                pass
            elif token in [apexParser.INTERFACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 800
                self.interfaceDeclaration()
                self.state = 802
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 801
                    self.match(apexParser.SEMI)


                pass
            elif token in [apexParser.ENUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 804
                self.enumDeclaration()
                self.state = 806
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 805
                    self.match(apexParser.SEMI)


                pass
            elif token in [apexParser.AT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 808
                self.annotationTypeDeclaration()
                self.state = 810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 809
                    self.match(apexParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationMethodOrConstantRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationMethodRest(self):
            return self.getTypedRuleContext(apexParser.AnnotationMethodRestContext,0)


        def annotationConstantRest(self):
            return self.getTypedRuleContext(apexParser.AnnotationConstantRestContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_annotationMethodOrConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodOrConstantRest" ):
                listener.enterAnnotationMethodOrConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodOrConstantRest" ):
                listener.exitAnnotationMethodOrConstantRest(self)




    def annotationMethodOrConstantRest(self):

        localctx = apexParser.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationMethodRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(apexParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_annotationMethodRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodRest" ):
                listener.enterAnnotationMethodRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodRest" ):
                listener.exitAnnotationMethodRest(self)




    def annotationMethodRest(self):

        localctx = apexParser.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_annotationMethodRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(apexParser.Identifier)
            self.state = 819
            self.match(apexParser.LPAREN)
            self.state = 820
            self.match(apexParser.RPAREN)
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.DEFAULT:
                self.state = 821
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationConstantRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(apexParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_annotationConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationConstantRest" ):
                listener.enterAnnotationConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationConstantRest" ):
                listener.exitAnnotationConstantRest(self)




    def annotationConstantRest(self):

        localctx = apexParser.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(apexParser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(apexParser.ElementValueContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = apexParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(apexParser.DEFAULT)
            self.state = 827
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(apexParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = apexParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(apexParser.LBRACE)
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BREAK) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.CONTINUE) | (1 << apexParser.DO) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.FOR) | (1 << apexParser.IF) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE) | (1 << apexParser.NEW) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.RETURN) | (1 << apexParser.SHORT) | (1 << apexParser.STATIC) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.THROW) | (1 << apexParser.TRY) | (1 << apexParser.VOID) | (1 << apexParser.WHILE) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.DB_INSERT) | (1 << apexParser.DB_UPSERT) | (1 << apexParser.DB_UPDATE) | (1 << apexParser.DB_DELETE) | (1 << apexParser.DB_UNDELETE) | (1 << apexParser.TESTMETHOD) | (1 << apexParser.RUNAS) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LBRACE - 64)) | (1 << (apexParser.SEMI - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)) | (1 << (apexParser.AT - 64)))) != 0):
                self.state = 830
                self.blockStatement()
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 836
            self.match(apexParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclarationStatement(self):
            return self.getTypedRuleContext(apexParser.LocalVariableDeclarationStatementContext,0)


        def statement(self):
            return self.getTypedRuleContext(apexParser.StatementContext,0)


        def typeDeclaration(self):
            return self.getTypedRuleContext(apexParser.TypeDeclarationContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = apexParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_blockStatement)
        try:
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 838
                self.localVariableDeclarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 839
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 840
                self.typeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalVariableDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(apexParser.LocalVariableDeclarationContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_localVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclarationStatement" ):
                listener.enterLocalVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclarationStatement" ):
                listener.exitLocalVariableDeclarationStatement(self)




    def localVariableDeclarationStatement(self):

        localctx = apexParser.LocalVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_localVariableDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.localVariableDeclaration()
            self.state = 844
            self.match(apexParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalVariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(apexParser.VariableDeclaratorsContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(apexParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)




    def localVariableDeclaration(self):

        localctx = apexParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_localVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.FINAL or _la==apexParser.AT:
                self.state = 846
                self.variableModifier()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 852
            self.typeType()
            self.state = 853
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(apexParser.BlockContext,0)


        def IF(self):
            return self.getToken(apexParser.IF, 0)

        def parExpression(self):
            return self.getTypedRuleContext(apexParser.ParExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.StatementContext)
            else:
                return self.getTypedRuleContext(apexParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(apexParser.ELSE, 0)

        def FOR(self):
            return self.getToken(apexParser.FOR, 0)

        def forControl(self):
            return self.getTypedRuleContext(apexParser.ForControlContext,0)


        def WHILE(self):
            return self.getToken(apexParser.WHILE, 0)

        def DO(self):
            return self.getToken(apexParser.DO, 0)

        def RUNAS(self):
            return self.getToken(apexParser.RUNAS, 0)

        def expression(self):
            return self.getTypedRuleContext(apexParser.ExpressionContext,0)


        def TRY(self):
            return self.getToken(apexParser.TRY, 0)

        def finallyBlock(self):
            return self.getTypedRuleContext(apexParser.FinallyBlockContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(apexParser.CatchClauseContext,i)


        def resourceSpecification(self):
            return self.getTypedRuleContext(apexParser.ResourceSpecificationContext,0)


        def RETURN(self):
            return self.getToken(apexParser.RETURN, 0)

        def THROW(self):
            return self.getToken(apexParser.THROW, 0)

        def BREAK(self):
            return self.getToken(apexParser.BREAK, 0)

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def CONTINUE(self):
            return self.getToken(apexParser.CONTINUE, 0)

        def statementExpression(self):
            return self.getTypedRuleContext(apexParser.StatementExpressionContext,0)


        def apexDbExpression(self):
            return self.getTypedRuleContext(apexParser.ApexDbExpressionContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = apexParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 855
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self.match(apexParser.IF)
                self.state = 857
                self.parExpression()
                self.state = 858
                self.statement()
                self.state = 861
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 859
                    self.match(apexParser.ELSE)
                    self.state = 860
                    self.statement()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 863
                self.match(apexParser.FOR)
                self.state = 864
                self.match(apexParser.LPAREN)
                self.state = 865
                self.forControl()
                self.state = 866
                self.match(apexParser.RPAREN)
                self.state = 867
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 869
                self.match(apexParser.WHILE)
                self.state = 870
                self.parExpression()
                self.state = 871
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 873
                self.match(apexParser.DO)
                self.state = 874
                self.statement()
                self.state = 875
                self.match(apexParser.WHILE)
                self.state = 876
                self.parExpression()
                self.state = 877
                self.match(apexParser.SEMI)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 879
                self.match(apexParser.RUNAS)
                self.state = 880
                self.match(apexParser.LPAREN)
                self.state = 881
                self.expression(0)
                self.state = 882
                self.match(apexParser.RPAREN)
                self.state = 883
                self.statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 885
                self.match(apexParser.TRY)
                self.state = 886
                self.block()
                self.state = 896
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [apexParser.CATCH]:
                    self.state = 888 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 887
                        self.catchClause()
                        self.state = 890 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==apexParser.CATCH):
                            break

                    self.state = 893
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==apexParser.FINALLY:
                        self.state = 892
                        self.finallyBlock()


                    pass
                elif token in [apexParser.FINALLY]:
                    self.state = 895
                    self.finallyBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 898
                self.match(apexParser.TRY)
                self.state = 899
                self.resourceSpecification()
                self.state = 900
                self.block()
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==apexParser.CATCH:
                    self.state = 901
                    self.catchClause()
                    self.state = 906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==apexParser.FINALLY:
                    self.state = 907
                    self.finallyBlock()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 910
                self.match(apexParser.RETURN)
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.NEW) | (1 << apexParser.SHORT) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.VOID) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)))) != 0):
                    self.state = 911
                    self.expression(0)


                self.state = 914
                self.match(apexParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 915
                self.match(apexParser.THROW)
                self.state = 916
                self.expression(0)
                self.state = 917
                self.match(apexParser.SEMI)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 919
                self.match(apexParser.BREAK)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==apexParser.Identifier:
                    self.state = 920
                    self.match(apexParser.Identifier)


                self.state = 923
                self.match(apexParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 924
                self.match(apexParser.CONTINUE)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==apexParser.Identifier:
                    self.state = 925
                    self.match(apexParser.Identifier)


                self.state = 928
                self.match(apexParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 929
                self.match(apexParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 930
                self.statementExpression()
                self.state = 931
                self.match(apexParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 933
                self.match(apexParser.Identifier)
                self.state = 934
                self.match(apexParser.COLON)
                self.state = 935
                self.statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 936
                self.apexDbExpression()
                self.state = 937
                self.match(apexParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getter(self):
            return self.getTypedRuleContext(apexParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(apexParser.SetterContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ModifierContext)
            else:
                return self.getTypedRuleContext(apexParser.ModifierContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_propertyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyBlock" ):
                listener.enterPropertyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyBlock" ):
                listener.exitPropertyBlock(self)




    def propertyBlock(self):

        localctx = apexParser.PropertyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_propertyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL) | (1 << apexParser.NATIVE) | (1 << apexParser.PRIVATE) | (1 << apexParser.PROTECTED) | (1 << apexParser.PUBLIC) | (1 << apexParser.STATIC) | (1 << apexParser.SYNCHRONIZED) | (1 << apexParser.TRANSIENT) | (1 << apexParser.GLOBAL) | (1 << apexParser.WEBSERVICE) | (1 << apexParser.APEX_WITH_SHARING) | (1 << apexParser.APEX_WITHOUT_SHARING) | (1 << apexParser.TESTMETHOD))) != 0) or _la==apexParser.AT:
                self.state = 941
                self.modifier()
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.GET]:
                self.state = 947
                self.getter()
                pass
            elif token in [apexParser.SET]:
                self.state = 948
                self.setter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(apexParser.GET, 0)

        def methodBody(self):
            return self.getTypedRuleContext(apexParser.MethodBodyContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)




    def getter(self):

        localctx = apexParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_getter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(apexParser.GET)
            self.state = 954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.SEMI]:
                self.state = 952
                self.match(apexParser.SEMI)
                pass
            elif token in [apexParser.LBRACE]:
                self.state = 953
                self.methodBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(apexParser.SET, 0)

        def methodBody(self):
            return self.getTypedRuleContext(apexParser.MethodBodyContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)




    def setter(self):

        localctx = apexParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_setter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(apexParser.SET)
            self.state = 959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.SEMI]:
                self.state = 957
                self.match(apexParser.SEMI)
                pass
            elif token in [apexParser.LBRACE]:
                self.state = 958
                self.methodBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(apexParser.CATCH, 0)

        def catchType(self):
            return self.getTypedRuleContext(apexParser.CatchTypeContext,0)


        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(apexParser.BlockContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(apexParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = apexParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.match(apexParser.CATCH)
            self.state = 962
            self.match(apexParser.LPAREN)
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.FINAL or _la==apexParser.AT:
                self.state = 963
                self.variableModifier()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 969
            self.catchType()
            self.state = 970
            self.match(apexParser.Identifier)
            self.state = 971
            self.match(apexParser.RPAREN)
            self.state = 972
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(apexParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_catchType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchType" ):
                listener.enterCatchType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchType" ):
                listener.exitCatchType(self)




    def catchType(self):

        localctx = apexParser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.qualifiedName()
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.BITOR:
                self.state = 975
                self.match(apexParser.BITOR)
                self.state = 976
                self.qualifiedName()
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinallyBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(apexParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(apexParser.BlockContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = apexParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(apexParser.FINALLY)
            self.state = 983
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourceSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resources(self):
            return self.getTypedRuleContext(apexParser.ResourcesContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_resourceSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceSpecification" ):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceSpecification" ):
                listener.exitResourceSpecification(self)




    def resourceSpecification(self):

        localctx = apexParser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(apexParser.LPAREN)
            self.state = 986
            self.resources()
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.SEMI:
                self.state = 987
                self.match(apexParser.SEMI)


            self.state = 990
            self.match(apexParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ResourceContext)
            else:
                return self.getTypedRuleContext(apexParser.ResourceContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_resources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResources" ):
                listener.enterResources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResources" ):
                listener.exitResources(self)




    def resources(self):

        localctx = apexParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.resource()
            self.state = 997
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 993
                    self.match(apexParser.SEMI)
                    self.state = 994
                    self.resource() 
                self.state = 999
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(apexParser.ClassOrInterfaceTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(apexParser.VariableDeclaratorIdContext,0)


        def expression(self):
            return self.getTypedRuleContext(apexParser.ExpressionContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(apexParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = apexParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_resource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.FINAL or _la==apexParser.AT:
                self.state = 1000
                self.variableModifier()
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1006
            self.classOrInterfaceType()
            self.state = 1007
            self.variableDeclaratorId()
            self.state = 1008
            self.match(apexParser.ASSIGN)
            self.state = 1009
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForControlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enhancedForControl(self):
            return self.getTypedRuleContext(apexParser.EnhancedForControlContext,0)


        def forInit(self):
            return self.getTypedRuleContext(apexParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(apexParser.ExpressionContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(apexParser.ForUpdateContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)




    def forControl(self):

        localctx = apexParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1011
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.NEW) | (1 << apexParser.SHORT) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.VOID) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)) | (1 << (apexParser.AT - 64)))) != 0):
                    self.state = 1012
                    self.forInit()


                self.state = 1015
                self.match(apexParser.SEMI)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.NEW) | (1 << apexParser.SHORT) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.VOID) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)))) != 0):
                    self.state = 1016
                    self.expression(0)


                self.state = 1019
                self.match(apexParser.SEMI)
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.NEW) | (1 << apexParser.SHORT) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.VOID) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)))) != 0):
                    self.state = 1020
                    self.forUpdate()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForInitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(apexParser.LocalVariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(apexParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = apexParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_forInit)
        try:
            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1025
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1026
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnhancedForControlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(apexParser.VariableDeclaratorIdContext,0)


        def expression(self):
            return self.getTypedRuleContext(apexParser.ExpressionContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(apexParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)




    def enhancedForControl(self):

        localctx = apexParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enhancedForControl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.FINAL or _la==apexParser.AT:
                self.state = 1029
                self.variableModifier()
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1035
            self.typeType()
            self.state = 1036
            self.variableDeclaratorId()
            self.state = 1037
            self.match(apexParser.COLON)
            self.state = 1038
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForUpdateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(apexParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)




    def forUpdate(self):

        localctx = apexParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(apexParser.ExpressionContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)




    def parExpression(self):

        localctx = apexParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(apexParser.LPAREN)
            self.state = 1043
            self.expression(0)
            self.state = 1044
            self.match(apexParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(apexParser.ExpressionContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = apexParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.expression(0)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==apexParser.COMMA:
                self.state = 1047
                self.match(apexParser.COMMA)
                self.state = 1048
                self.expression(0)
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(apexParser.ExpressionContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_statementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementExpression" ):
                listener.enterStatementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementExpression" ):
                listener.exitStatementExpression(self)




    def statementExpression(self):

        localctx = apexParser.StatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_statementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(apexParser.ExpressionContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = apexParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ApexDbUpsertExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DB_UPSERT(self):
            return self.getToken(apexParser.DB_UPSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(apexParser.ExpressionContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_apexDbUpsertExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApexDbUpsertExpression" ):
                listener.enterApexDbUpsertExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApexDbUpsertExpression" ):
                listener.exitApexDbUpsertExpression(self)




    def apexDbUpsertExpression(self):

        localctx = apexParser.ApexDbUpsertExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_apexDbUpsertExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(apexParser.DB_UPSERT)
            self.state = 1059
            self.expression(0)
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.NEW) | (1 << apexParser.SHORT) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.VOID) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)))) != 0):
                self.state = 1060
                self.expression(0)
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ApexDbExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(apexParser.ExpressionContext,0)


        def DB_INSERT(self):
            return self.getToken(apexParser.DB_INSERT, 0)

        def DB_UPDATE(self):
            return self.getToken(apexParser.DB_UPDATE, 0)

        def DB_DELETE(self):
            return self.getToken(apexParser.DB_DELETE, 0)

        def DB_UNDELETE(self):
            return self.getToken(apexParser.DB_UNDELETE, 0)

        def apexDbUpsertExpression(self):
            return self.getTypedRuleContext(apexParser.ApexDbUpsertExpressionContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_apexDbExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApexDbExpression" ):
                listener.enterApexDbExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApexDbExpression" ):
                listener.exitApexDbExpression(self)




    def apexDbExpression(self):

        localctx = apexParser.ApexDbExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_apexDbExpression)
        self._la = 0 # Token type
        try:
            self.state = 1069
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.DB_INSERT, apexParser.DB_UPDATE, apexParser.DB_DELETE, apexParser.DB_UNDELETE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1066
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.DB_INSERT) | (1 << apexParser.DB_UPDATE) | (1 << apexParser.DB_DELETE) | (1 << apexParser.DB_UNDELETE))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1067
                self.expression(0)
                pass
            elif token in [apexParser.DB_UPSERT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.apexDbUpsertExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(apexParser.PrimaryContext,0)


        def NEW(self):
            return self.getToken(apexParser.NEW, 0)

        def creator(self):
            return self.getTypedRuleContext(apexParser.CreatorContext,0)


        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(apexParser.ExpressionContext,i)


        def GET(self):
            return self.getToken(apexParser.GET, 0)

        def expressionList(self):
            return self.getTypedRuleContext(apexParser.ExpressionListContext,0)


        def SET(self):
            return self.getToken(apexParser.SET, 0)

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def THIS(self):
            return self.getToken(apexParser.THIS, 0)

        def DB_INSERT(self):
            return self.getToken(apexParser.DB_INSERT, 0)

        def DB_UPSERT(self):
            return self.getToken(apexParser.DB_UPSERT, 0)

        def DB_UPDATE(self):
            return self.getToken(apexParser.DB_UPDATE, 0)

        def DB_DELETE(self):
            return self.getToken(apexParser.DB_DELETE, 0)

        def DB_UNDELETE(self):
            return self.getToken(apexParser.DB_UNDELETE, 0)

        def SUPER(self):
            return self.getToken(apexParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(apexParser.SuperSuffixContext,0)


        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(apexParser.ExplicitGenericInvocationContext,0)


        def INSTANCEOF(self):
            return self.getToken(apexParser.INSTANCEOF, 0)

        def getRuleIndex(self):
            return apexParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = apexParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 184
        self.enterRecursionRule(localctx, 184, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1072
                self.primary()
                pass

            elif la_ == 2:
                self.state = 1073
                self.match(apexParser.NEW)
                self.state = 1074
                self.creator()
                pass

            elif la_ == 3:
                self.state = 1075
                self.match(apexParser.LPAREN)
                self.state = 1076
                self.typeType()
                self.state = 1077
                self.match(apexParser.RPAREN)
                self.state = 1078
                self.expression(17)
                pass

            elif la_ == 4:
                self.state = 1080
                _la = self._input.LA(1)
                if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (apexParser.INC - 90)) | (1 << (apexParser.DEC - 90)) | (1 << (apexParser.ADD - 90)) | (1 << (apexParser.SUB - 90)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1081
                self.expression(15)
                pass

            elif la_ == 5:
                self.state = 1082
                _la = self._input.LA(1)
                if not(_la==apexParser.BANG or _la==apexParser.TILDE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1083
                self.expression(14)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1184
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                    if la_ == 1:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1086
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1087
                        _la = self._input.LA(1)
                        if not(((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (apexParser.MUL - 94)) | (1 << (apexParser.DIV - 94)) | (1 << (apexParser.MOD - 94)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1088
                        self.expression(14)
                        pass

                    elif la_ == 2:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1089
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1090
                        _la = self._input.LA(1)
                        if not(_la==apexParser.ADD or _la==apexParser.SUB):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1091
                        self.expression(13)
                        pass

                    elif la_ == 3:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1092
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1100
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                        if la_ == 1:
                            self.state = 1093
                            self.match(apexParser.LT)
                            self.state = 1094
                            self.match(apexParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1095
                            self.match(apexParser.GT)
                            self.state = 1096
                            self.match(apexParser.GT)
                            self.state = 1097
                            self.match(apexParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1098
                            self.match(apexParser.GT)
                            self.state = 1099
                            self.match(apexParser.GT)
                            pass


                        self.state = 1102
                        self.expression(12)
                        pass

                    elif la_ == 4:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1103
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1104
                        _la = self._input.LA(1)
                        if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (apexParser.GT - 78)) | (1 << (apexParser.LT - 78)) | (1 << (apexParser.LE - 78)) | (1 << (apexParser.GE - 78)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1105
                        self.expression(11)
                        pass

                    elif la_ == 5:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1106
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1107
                        _la = self._input.LA(1)
                        if not(_la==apexParser.T__0 or _la==apexParser.EQUAL or _la==apexParser.NOTEQUAL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1108
                        self.expression(9)
                        pass

                    elif la_ == 6:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1109
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1110
                        self.match(apexParser.BITAND)
                        self.state = 1111
                        self.expression(8)
                        pass

                    elif la_ == 7:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1112
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1113
                        self.match(apexParser.CARET)
                        self.state = 1114
                        self.expression(7)
                        pass

                    elif la_ == 8:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1115
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1116
                        self.match(apexParser.BITOR)
                        self.state = 1117
                        self.expression(6)
                        pass

                    elif la_ == 9:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1118
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1119
                        self.match(apexParser.AND)
                        self.state = 1120
                        self.expression(5)
                        pass

                    elif la_ == 10:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1121
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1122
                        self.match(apexParser.OR)
                        self.state = 1123
                        self.expression(4)
                        pass

                    elif la_ == 11:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1124
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1125
                        self.match(apexParser.QUESTION)
                        self.state = 1126
                        self.expression(0)
                        self.state = 1127
                        self.match(apexParser.COLON)
                        self.state = 1128
                        self.expression(3)
                        pass

                    elif la_ == 12:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1130
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1131
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (apexParser.ASSIGN - 77)) | (1 << (apexParser.ADD_ASSIGN - 77)) | (1 << (apexParser.SUB_ASSIGN - 77)) | (1 << (apexParser.MUL_ASSIGN - 77)) | (1 << (apexParser.DIV_ASSIGN - 77)) | (1 << (apexParser.AND_ASSIGN - 77)) | (1 << (apexParser.OR_ASSIGN - 77)) | (1 << (apexParser.XOR_ASSIGN - 77)) | (1 << (apexParser.MOD_ASSIGN - 77)) | (1 << (apexParser.LSHIFT_ASSIGN - 77)) | (1 << (apexParser.RSHIFT_ASSIGN - 77)) | (1 << (apexParser.URSHIFT_ASSIGN - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1132
                        self.expression(1)
                        pass

                    elif la_ == 13:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1133
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 1134
                        self.match(apexParser.DOT)
                        self.state = 1135
                        self.match(apexParser.GET)
                        self.state = 1136
                        self.match(apexParser.LPAREN)
                        self.state = 1138
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.NEW) | (1 << apexParser.SHORT) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.VOID) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)))) != 0):
                            self.state = 1137
                            self.expressionList()


                        self.state = 1140
                        self.match(apexParser.RPAREN)
                        pass

                    elif la_ == 14:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1141
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1142
                        self.match(apexParser.DOT)
                        self.state = 1143
                        self.match(apexParser.SET)
                        self.state = 1144
                        self.match(apexParser.LPAREN)
                        self.state = 1146
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.NEW) | (1 << apexParser.SHORT) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.VOID) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)))) != 0):
                            self.state = 1145
                            self.expressionList()


                        self.state = 1148
                        self.match(apexParser.RPAREN)
                        pass

                    elif la_ == 15:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1149
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1150
                        self.match(apexParser.DOT)
                        self.state = 1151
                        self.match(apexParser.Identifier)
                        pass

                    elif la_ == 16:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1152
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1153
                        self.match(apexParser.DOT)
                        self.state = 1154
                        self.match(apexParser.THIS)
                        pass

                    elif la_ == 17:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1155
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1156
                        self.match(apexParser.DOT)
                        self.state = 1157
                        self.match(apexParser.NEW)
                        pass

                    elif la_ == 18:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1158
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1159
                        self.match(apexParser.DOT)
                        self.state = 1160
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.DB_INSERT) | (1 << apexParser.DB_UPSERT) | (1 << apexParser.DB_UPDATE) | (1 << apexParser.DB_DELETE) | (1 << apexParser.DB_UNDELETE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 19:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1161
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1162
                        self.match(apexParser.DOT)
                        self.state = 1163
                        self.match(apexParser.SUPER)
                        self.state = 1164
                        self.superSuffix()
                        pass

                    elif la_ == 20:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1165
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1166
                        self.match(apexParser.DOT)
                        self.state = 1167
                        self.explicitGenericInvocation()
                        pass

                    elif la_ == 21:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1168
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1169
                        self.match(apexParser.LBRACK)
                        self.state = 1170
                        self.expression(0)
                        self.state = 1171
                        self.match(apexParser.RBRACK)
                        pass

                    elif la_ == 22:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1173
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1174
                        self.match(apexParser.LPAREN)
                        self.state = 1176
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.NEW) | (1 << apexParser.SHORT) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.VOID) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)))) != 0):
                            self.state = 1175
                            self.expressionList()


                        self.state = 1178
                        self.match(apexParser.RPAREN)
                        pass

                    elif la_ == 23:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1179
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1180
                        _la = self._input.LA(1)
                        if not(_la==apexParser.INC or _la==apexParser.DEC):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 24:
                        localctx = apexParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1181
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1182
                        self.match(apexParser.INSTANCEOF)
                        self.state = 1183
                        self.typeType()
                        pass

             
                self.state = 1188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(apexParser.ExpressionContext,0)


        def THIS(self):
            return self.getToken(apexParser.THIS, 0)

        def SUPER(self):
            return self.getToken(apexParser.SUPER, 0)

        def literal(self):
            return self.getTypedRuleContext(apexParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def typeType(self):
            return self.getTypedRuleContext(apexParser.TypeTypeContext,0)


        def CLASS(self):
            return self.getToken(apexParser.CLASS, 0)

        def VOID(self):
            return self.getToken(apexParser.VOID, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(apexParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(apexParser.ExplicitGenericInvocationSuffixContext,0)


        def arguments(self):
            return self.getTypedRuleContext(apexParser.ArgumentsContext,0)


        def SoqlLiteral(self):
            return self.getToken(apexParser.SoqlLiteral, 0)

        def getRuleIndex(self):
            return apexParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = apexParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_primary)
        try:
            self.state = 1211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1189
                self.match(apexParser.LPAREN)
                self.state = 1190
                self.expression(0)
                self.state = 1191
                self.match(apexParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1193
                self.match(apexParser.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1194
                self.match(apexParser.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1195
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1196
                self.match(apexParser.Identifier)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1197
                self.typeType()
                self.state = 1198
                self.match(apexParser.DOT)
                self.state = 1199
                self.match(apexParser.CLASS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1201
                self.match(apexParser.VOID)
                self.state = 1202
                self.match(apexParser.DOT)
                self.state = 1203
                self.match(apexParser.CLASS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1204
                self.nonWildcardTypeArguments()
                self.state = 1208
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [apexParser.SUPER, apexParser.Identifier]:
                    self.state = 1205
                    self.explicitGenericInvocationSuffix()
                    pass
                elif token in [apexParser.THIS]:
                    self.state = 1206
                    self.match(apexParser.THIS)
                    self.state = 1207
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1210
                self.match(apexParser.SoqlLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(apexParser.NonWildcardTypeArgumentsContext,0)


        def createdName(self):
            return self.getTypedRuleContext(apexParser.CreatedNameContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(apexParser.ClassCreatorRestContext,0)


        def arrayCreatorRest(self):
            return self.getTypedRuleContext(apexParser.ArrayCreatorRestContext,0)


        def mapCreatorRest(self):
            return self.getTypedRuleContext(apexParser.MapCreatorRestContext,0)


        def setCreatorRest(self):
            return self.getTypedRuleContext(apexParser.SetCreatorRestContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)




    def creator(self):

        localctx = apexParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_creator)
        try:
            self.state = 1224
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.LT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1213
                self.nonWildcardTypeArguments()
                self.state = 1214
                self.createdName()
                self.state = 1215
                self.classCreatorRest()
                pass
            elif token in [apexParser.SET, apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.SHORT, apexParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1217
                self.createdName()
                self.state = 1222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1218
                    self.arrayCreatorRest()
                    pass

                elif la_ == 2:
                    self.state = 1219
                    self.classCreatorRest()
                    pass

                elif la_ == 3:
                    self.state = 1220
                    self.mapCreatorRest()
                    pass

                elif la_ == 4:
                    self.state = 1221
                    self.setCreatorRest()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(apexParser.Identifier)
            else:
                return self.getToken(apexParser.Identifier, i)

        def typeArgumentsOrDiamond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.TypeArgumentsOrDiamondContext)
            else:
                return self.getTypedRuleContext(apexParser.TypeArgumentsOrDiamondContext,i)


        def primitiveType(self):
            return self.getTypedRuleContext(apexParser.PrimitiveTypeContext,0)


        def SET(self):
            return self.getToken(apexParser.SET, 0)

        def getRuleIndex(self):
            return apexParser.RULE_createdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName" ):
                listener.enterCreatedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName" ):
                listener.exitCreatedName(self)




    def createdName(self):

        localctx = apexParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_createdName)
        self._la = 0 # Token type
        try:
            self.state = 1243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1226
                self.match(apexParser.Identifier)
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==apexParser.LT:
                    self.state = 1227
                    self.typeArgumentsOrDiamond()


                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==apexParser.DOT:
                    self.state = 1230
                    self.match(apexParser.DOT)
                    self.state = 1231
                    self.match(apexParser.Identifier)
                    self.state = 1233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==apexParser.LT:
                        self.state = 1232
                        self.typeArgumentsOrDiamond()


                    self.state = 1239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.SHORT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1240
                self.primitiveType()
                pass
            elif token in [apexParser.SET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1241
                self.match(apexParser.SET)
                self.state = 1242
                self.typeArgumentsOrDiamond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InnerCreatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def classCreatorRest(self):
            return self.getTypedRuleContext(apexParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(apexParser.NonWildcardTypeArgumentsOrDiamondContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_innerCreator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerCreator" ):
                listener.enterInnerCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerCreator" ):
                listener.exitInnerCreator(self)




    def innerCreator(self):

        localctx = apexParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_innerCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(apexParser.Identifier)
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==apexParser.LT:
                self.state = 1246
                self.nonWildcardTypeArgumentsOrDiamond()


            self.state = 1249
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayCreatorRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(apexParser.ArrayInitializerContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(apexParser.ExpressionContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)




    def arrayCreatorRest(self):

        localctx = apexParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(apexParser.LBRACK)
            self.state = 1279
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.RBRACK]:
                self.state = 1252
                self.match(apexParser.RBRACK)
                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==apexParser.LBRACK:
                    self.state = 1253
                    self.match(apexParser.LBRACK)
                    self.state = 1254
                    self.match(apexParser.RBRACK)
                    self.state = 1259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1260
                self.arrayInitializer()
                pass
            elif token in [apexParser.SoqlLiteral, apexParser.SET, apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.NEW, apexParser.SHORT, apexParser.SUPER, apexParser.THIS, apexParser.VOID, apexParser.IntegerLiteral, apexParser.FloatingPointLiteral, apexParser.BooleanLiteral, apexParser.CharacterLiteral, apexParser.StringLiteral, apexParser.NullLiteral, apexParser.LPAREN, apexParser.LT, apexParser.BANG, apexParser.TILDE, apexParser.INC, apexParser.DEC, apexParser.ADD, apexParser.SUB, apexParser.Identifier]:
                self.state = 1261
                self.expression(0)
                self.state = 1262
                self.match(apexParser.RBRACK)
                self.state = 1269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1263
                        self.match(apexParser.LBRACK)
                        self.state = 1264
                        self.expression(0)
                        self.state = 1265
                        self.match(apexParser.RBRACK) 
                    self.state = 1271
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

                self.state = 1276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1272
                        self.match(apexParser.LBRACK)
                        self.state = 1273
                        self.match(apexParser.RBRACK) 
                    self.state = 1278
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MapCreatorRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(apexParser.Identifier)
            else:
                return self.getToken(apexParser.Identifier, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(apexParser.ExpressionContext,i)


        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.LiteralContext)
            else:
                return self.getTypedRuleContext(apexParser.LiteralContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_mapCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapCreatorRest" ):
                listener.enterMapCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapCreatorRest" ):
                listener.exitMapCreatorRest(self)




    def mapCreatorRest(self):

        localctx = apexParser.MapCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_mapCreatorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(apexParser.LBRACE)
            self.state = 1309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.RBRACE]:
                self.state = 1282
                self.match(apexParser.RBRACE)
                pass
            elif token in [apexParser.SoqlLiteral, apexParser.SET, apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.NEW, apexParser.SHORT, apexParser.SUPER, apexParser.THIS, apexParser.VOID, apexParser.IntegerLiteral, apexParser.FloatingPointLiteral, apexParser.BooleanLiteral, apexParser.CharacterLiteral, apexParser.StringLiteral, apexParser.NullLiteral, apexParser.LPAREN, apexParser.LT, apexParser.BANG, apexParser.TILDE, apexParser.INC, apexParser.DEC, apexParser.ADD, apexParser.SUB, apexParser.Identifier]:
                self.state = 1285
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1283
                    self.match(apexParser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1284
                    self.expression(0)
                    pass


                self.state = 1287
                self.match(apexParser.LAMBDA_LIKE)
                self.state = 1290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 1288
                    self.literal()
                    pass

                elif la_ == 2:
                    self.state = 1289
                    self.expression(0)
                    pass


                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==apexParser.COMMA:
                    self.state = 1292
                    self.match(apexParser.COMMA)
                    self.state = 1295
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                    if la_ == 1:
                        self.state = 1293
                        self.match(apexParser.Identifier)
                        pass

                    elif la_ == 2:
                        self.state = 1294
                        self.expression(0)
                        pass


                    self.state = 1297
                    self.match(apexParser.LAMBDA_LIKE)
                    self.state = 1300
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        self.state = 1298
                        self.literal()
                        pass

                    elif la_ == 2:
                        self.state = 1299
                        self.expression(0)
                        pass


                    self.state = 1306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1307
                self.match(apexParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetCreatorRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.LiteralContext)
            else:
                return self.getTypedRuleContext(apexParser.LiteralContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(apexParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(apexParser.ExpressionContext,i)


        def getRuleIndex(self):
            return apexParser.RULE_setCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCreatorRest" ):
                listener.enterSetCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCreatorRest" ):
                listener.exitSetCreatorRest(self)




    def setCreatorRest(self):

        localctx = apexParser.SetCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_setCreatorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.match(apexParser.LBRACE)
            self.state = 1329
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.RBRACE]:
                self.state = 1312
                self.match(apexParser.RBRACE)
                pass
            elif token in [apexParser.SoqlLiteral, apexParser.SET, apexParser.BYTE, apexParser.CHAR, apexParser.FLOAT, apexParser.INT, apexParser.NEW, apexParser.SHORT, apexParser.SUPER, apexParser.THIS, apexParser.VOID, apexParser.IntegerLiteral, apexParser.FloatingPointLiteral, apexParser.BooleanLiteral, apexParser.CharacterLiteral, apexParser.StringLiteral, apexParser.NullLiteral, apexParser.LPAREN, apexParser.LT, apexParser.BANG, apexParser.TILDE, apexParser.INC, apexParser.DEC, apexParser.ADD, apexParser.SUB, apexParser.Identifier]:
                self.state = 1315
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1313
                    self.literal()
                    pass

                elif la_ == 2:
                    self.state = 1314
                    self.expression(0)
                    pass


                self.state = 1324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==apexParser.COMMA:
                    self.state = 1317
                    self.match(apexParser.COMMA)
                    self.state = 1320
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                    if la_ == 1:
                        self.state = 1318
                        self.literal()
                        pass

                    elif la_ == 2:
                        self.state = 1319
                        self.expression(0)
                        pass


                    self.state = 1326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1327
                self.match(apexParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassCreatorRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(apexParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(apexParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)




    def classCreatorRest(self):

        localctx = apexParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.arguments()
            self.state = 1333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1332
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(apexParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(apexParser.ExplicitGenericInvocationSuffixContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_explicitGenericInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocation" ):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocation" ):
                listener.exitExplicitGenericInvocation(self)




    def explicitGenericInvocation(self):

        localctx = apexParser.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.nonWildcardTypeArguments()
            self.state = 1336
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonWildcardTypeArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeList(self):
            return self.getTypedRuleContext(apexParser.TypeListContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_nonWildcardTypeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArguments" ):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArguments" ):
                listener.exitNonWildcardTypeArguments(self)




    def nonWildcardTypeArguments(self):

        localctx = apexParser.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(apexParser.LT)
            self.state = 1339
            self.typeList()
            self.state = 1340
            self.match(apexParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentsOrDiamondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArguments(self):
            return self.getTypedRuleContext(apexParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)




    def typeArgumentsOrDiamond(self):

        localctx = apexParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self.match(apexParser.LT)
                self.state = 1343
                self.match(apexParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1344
                self.typeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(apexParser.NonWildcardTypeArgumentsContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_nonWildcardTypeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArgumentsOrDiamond" ):
                listener.enterNonWildcardTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArgumentsOrDiamond" ):
                listener.exitNonWildcardTypeArgumentsOrDiamond(self)




    def nonWildcardTypeArgumentsOrDiamond(self):

        localctx = apexParser.NonWildcardTypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1347
                self.match(apexParser.LT)
                self.state = 1348
                self.match(apexParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1349
                self.nonWildcardTypeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuperSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(apexParser.ArgumentsContext,0)


        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def getRuleIndex(self):
            return apexParser.RULE_superSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperSuffix" ):
                listener.enterSuperSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperSuffix" ):
                listener.exitSuperSuffix(self)




    def superSuffix(self):

        localctx = apexParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_superSuffix)
        try:
            self.state = 1358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.LPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1352
                self.arguments()
                pass
            elif token in [apexParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1353
                self.match(apexParser.DOT)
                self.state = 1354
                self.match(apexParser.Identifier)
                self.state = 1356
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1355
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(apexParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(apexParser.SuperSuffixContext,0)


        def Identifier(self):
            return self.getToken(apexParser.Identifier, 0)

        def arguments(self):
            return self.getTypedRuleContext(apexParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_explicitGenericInvocationSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocationSuffix" ):
                listener.enterExplicitGenericInvocationSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocationSuffix" ):
                listener.exitExplicitGenericInvocationSuffix(self)




    def explicitGenericInvocationSuffix(self):

        localctx = apexParser.ExplicitGenericInvocationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [apexParser.SUPER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1360
                self.match(apexParser.SUPER)
                self.state = 1361
                self.superSuffix()
                pass
            elif token in [apexParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1362
                self.match(apexParser.Identifier)
                self.state = 1363
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(apexParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return apexParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = apexParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(apexParser.LPAREN)
            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.NEW) | (1 << apexParser.SHORT) | (1 << apexParser.SUPER) | (1 << apexParser.THIS) | (1 << apexParser.VOID) | (1 << apexParser.IntegerLiteral) | (1 << apexParser.FloatingPointLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)) | (1 << (apexParser.Identifier - 64)))) != 0):
                self.state = 1367
                self.expressionList()


            self.state = 1370
            self.match(apexParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[92] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 9)
         




